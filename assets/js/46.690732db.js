(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{428:function(s,n,a){"use strict";a.r(n);var e=a(28),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fba6959f49c14c448b34c7472ac0eaf3~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),s._v(" "),a("p",[s._v("TypeScript 已经入门了，但觉得 TypeScript 泛型有点难，想系统学习 TypeScript 泛型相关知识的小伙伴们看过来"),a("a",{attrs:{href:"https://juejin.cn/post/6844904184894980104",title:"https://juejin.cn/post/6844904184894980104",target:"_blank",rel:"noopener noreferrer"}},[s._v("一文读懂 TypeScript 泛型及应用（ 7.8K字）"),a("OutboundLink")],1),s._v("（掘金）。")]),s._v(" "),a("h2",{attrs:{id:"一、typescript-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、typescript-是什么"}},[s._v("#")]),s._v(" 一、TypeScript 是什么")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.typescriptlang.org%2F",title:"https://www.typescriptlang.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("TypeScript"),a("OutboundLink")],1),s._v(" 是一种由微软开发的自由和开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。")]),s._v(" "),a("p",[s._v("TypeScript 提供最新的和不断发展的 JavaScript 特性，包括那些来自 2015 年的 ECMAScript 和未来的提案中的特性，比如异步功能和 Decorators，以帮助建立健壮的组件。下图显示了 TypeScript 与 ES5、ES2015 和 ES2016 之间的关系：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0d981a55111f4d458c85b4ae19d9c55f~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"_1-1-typescript-与-javascript-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-typescript-与-javascript-的区别"}},[s._v("#")]),s._v(" 1.1 TypeScript 与 JavaScript 的区别")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("TypeScript")]),s._v(" "),a("th",[s._v("JavaScript")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("JavaScript 的超集用于解决大型项目的代码复杂性")]),s._v(" "),a("td",[s._v("一种脚本语言，用于创建动态网页。")])]),s._v(" "),a("tr",[a("td",[s._v("可以在编译期间发现并纠正错误")]),s._v(" "),a("td",[s._v("作为一种解释型语言，只能在运行时发现错误")])]),s._v(" "),a("tr",[a("td",[s._v("强类型，支持静态和动态类型")]),s._v(" "),a("td",[s._v("弱类型，没有静态类型选项")])]),s._v(" "),a("tr",[a("td",[s._v("最终被编译成 JavaScript 代码，使浏览器可以理解")]),s._v(" "),a("td",[s._v("可以直接在浏览器中使用")])]),s._v(" "),a("tr",[a("td",[s._v("支持模块、泛型和接口")]),s._v(" "),a("td",[s._v("不支持模块，泛型或接口")])]),s._v(" "),a("tr",[a("td",[s._v("支持 ES3，ES4，ES5 和 ES6 等")]),s._v(" "),a("td",[s._v("不支持编译其他 ES3，ES4，ES5 或 ES6 功能")])]),s._v(" "),a("tr",[a("td",[s._v("社区的支持仍在增长，而且还不是很大")]),s._v(" "),a("td",[s._v("大量的社区支持以及大量文档和解决问题的支持")])])])]),s._v(" "),a("h3",{attrs:{id:"_1-2-获取-typescript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-获取-typescript"}},[s._v("#")]),s._v(" 1.2 获取 TypeScript")]),s._v(" "),a("p",[s._v("命令行的 TypeScript 编译器可以使用 Node.js 包来安装。")]),s._v(" "),a("p",[a("strong",[s._v("1.安装 TypeScript")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ npm install -g typescript\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("2.编译 TypeScript 文件")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("$ tsc helloworld.ts\n# helloworld.ts => helloworld.js\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("当然，对于刚入门 TypeScript 的小伙伴，也可以不用安装 "),a("code",[s._v("typescript")]),s._v("，而是直接使用线上的 "),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.typescriptlang.org%2Fplay%2F",title:"https://www.typescriptlang.org/play/",target:"_blank",rel:"noopener noreferrer"}},[s._v("TypeScript Playground"),a("OutboundLink")],1),s._v(" 来学习新的语法或新特性。")]),s._v(" "),a("blockquote",[a("p",[s._v("TypeScript Playground："),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.typescriptlang.org%2Fplay%2F",title:"https://www.typescriptlang.org/play/",target:"_blank",rel:"noopener noreferrer"}},[s._v("www.typescriptlang.org/play/"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"二、typescript-基础类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、typescript-基础类型"}},[s._v("#")]),s._v(" 二、TypeScript 基础类型")]),s._v(" "),a("h3",{attrs:{id:"_2-1-boolean-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-boolean-类型"}},[s._v("#")]),s._v(" 2.1 Boolean 类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let isDone: boolean = false;\n// ES5：var isDone = false;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_2-2-number-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-number-类型"}},[s._v("#")]),s._v(" 2.2 Number 类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let count: number = 10;\n// ES5：var count = 10;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_2-3-string-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-string-类型"}},[s._v("#")]),s._v(" 2.3 String 类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let name: string = \"Semliker\";\n// ES5：var name = 'Semlinker';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_2-4-array-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-array-类型"}},[s._v("#")]),s._v(" 2.4 Array 类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let list: number[] = [1, 2, 3];\n// ES5：var list = [1,2,3];\n\nlet list: Array<number> = [1, 2, 3]; // Array<number>泛型语法\n// ES5：var list = [1,2,3];\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"_2-5-enum-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-enum-类型"}},[s._v("#")]),s._v(" 2.5 Enum 类型")]),s._v(" "),a("p",[s._v("使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript 支持数字的和基于字符串的枚举。")]),s._v(" "),a("p",[a("strong",[s._v("1.数字枚举")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Direction {\n  NORTH,\n  SOUTH,\n  EAST,\n  WEST,\n}\n\nlet dir: Direction = Direction.NORTH;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("默认情况下，NORTH 的初始值为 0，其余的成员会从 1 开始自动增长。换句话说，Direction.SOUTH 的值为 1，Direction.EAST 的值为 2，Direction.WEST 的值为 3。上面的枚举示例代码经过编译后会生成以下代码：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('"use strict";\nvar Direction;\n(function (Direction) {\n  Direction[(Direction["NORTH"] = 0)] = "NORTH";\n  Direction[(Direction["SOUTH"] = 1)] = "SOUTH";\n  Direction[(Direction["EAST"] = 2)] = "EAST";\n  Direction[(Direction["WEST"] = 3)] = "WEST";\n})(Direction || (Direction = {}));\nvar dir = Direction.NORTH;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("当然我们也可以设置 NORTH 的初始值，比如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Direction {\n  NORTH = 3,\n  SOUTH,\n  EAST,\n  WEST,\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v("2.字符串枚举")])]),s._v(" "),a("p",[s._v("在 TypeScript 2.4 版本，允许我们使用字符串枚举。在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('enum Direction {\n  NORTH = "NORTH",\n  SOUTH = "SOUTH",\n  EAST = "EAST",\n  WEST = "WEST",\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("以上代码对于的 ES5 代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('"use strict";\nvar Direction;\n(function (Direction) {\n    Direction["NORTH"] = "NORTH";\n    Direction["SOUTH"] = "SOUTH";\n    Direction["EAST"] = "EAST";\n    Direction["WEST"] = "WEST";\n})(Direction || (Direction = {}));\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("3.异构枚举")])]),s._v(" "),a("p",[s._v("异构枚举的成员值是数字和字符串的混合：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('enum Enum {\n  A,\n  B,\n  C = "C",\n  D = "D",\n  E = 8,\n  F,\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("以上代码对于的 ES5 代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('"use strict";\nvar Enum;\n(function (Enum) {\n    Enum[Enum["A"] = 0] = "A";\n    Enum[Enum["B"] = 1] = "B";\n    Enum["C"] = "C";\n    Enum["D"] = "D";\n    Enum[Enum["E"] = 8] = "E";\n    Enum[Enum["F"] = 9] = "F";\n})(Enum || (Enum = {}));\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("通过观察上述生成的 ES5 代码，我们可以发现数字枚举相对字符串枚举多了 “反向映射”：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("console.log(Enum.A) //输出：0\nconsole.log(Enum[0]) // 输出：A\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_2-6-any-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-any-类型"}},[s._v("#")]),s._v(" 2.6 Any 类型")]),s._v(" "),a("p",[s._v("在 TypeScript 中，任何类型都可以被归为 any 类型。这让 any 类型成为了类型系统的顶级类型（也被称作全局超级类型）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let notSure: any = 666;\nnotSure = "Semlinker";\nnotSure = false;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("code",[s._v("any")]),s._v(" 类型本质上是类型系统的一个逃逸舱。作为开发者，这给了我们很大的自由：TypeScript 允许我们对 "),a("code",[s._v("any")]),s._v(" 类型的值执行任何操作，而无需事先执行任何形式的检查。比如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let value: any;\n\nvalue.foo.bar; // OK\nvalue.trim(); // OK\nvalue(); // OK\nnew value(); // OK\nvalue[0][1]; // OK\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("在许多场景下，这太宽松了。使用 "),a("code",[s._v("any")]),s._v(" 类型，可以很容易地编写类型正确但在运行时有问题的代码。如果我们使用 "),a("code",[s._v("any")]),s._v(" 类型，就无法使用 TypeScript 提供的大量的保护机制。为了解决 "),a("code",[s._v("any")]),s._v(" 带来的问题，TypeScript 3.0 引入了 "),a("code",[s._v("unknown")]),s._v(" 类型。")]),s._v(" "),a("h3",{attrs:{id:"_2-7-unknown-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-unknown-类型"}},[s._v("#")]),s._v(" 2.7 Unknown 类型")]),s._v(" "),a("p",[s._v("就像所有类型都可以赋值给 "),a("code",[s._v("any")]),s._v("，所有类型也都可以赋值给 "),a("code",[s._v("unknown")]),s._v("。这使得 "),a("code",[s._v("unknown")]),s._v(" 成为 TypeScript 类型系统的另一种顶级类型（另一种是 "),a("code",[s._v("any")]),s._v("）。下面我们来看一下 "),a("code",[s._v("unknown")]),s._v(" 类型的使用示例：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let value: unknown;\n\nvalue = true; // OK\nvalue = 42; // OK\nvalue = "Hello World"; // OK\nvalue = []; // OK\nvalue = {}; // OK\nvalue = Math.random; // OK\nvalue = null; // OK\nvalue = undefined; // OK\nvalue = new TypeError(); // OK\nvalue = Symbol("type"); // OK\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("对 "),a("code",[s._v("value")]),s._v(" 变量的所有赋值都被认为是类型正确的。但是，当我们尝试将类型为 "),a("code",[s._v("unknown")]),s._v(" 的值赋值给其他类型的变量时会发生什么？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let value: unknown;\n\nlet value1: unknown = value; // OK\nlet value2: any = value; // OK\nlet value3: boolean = value; // Error\nlet value4: number = value; // Error\nlet value5: string = value; // Error\nlet value6: object = value; // Error\nlet value7: any[] = value; // Error\nlet value8: Function = value; // Error\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("code",[s._v("unknown")]),s._v(" 类型只能被赋值给 "),a("code",[s._v("any")]),s._v(" 类型和 "),a("code",[s._v("unknown")]),s._v(" 类型本身。直观地说，这是有道理的：只有能够保存任意类型值的容器才能保存 "),a("code",[s._v("unknown")]),s._v(" 类型的值。毕竟我们不知道变量 "),a("code",[s._v("value")]),s._v(" 中存储了什么类型的值。")]),s._v(" "),a("p",[s._v("现在让我们看看当我们尝试对类型为 "),a("code",[s._v("unknown")]),s._v(" 的值执行操作时会发生什么。以下是我们在之前 "),a("code",[s._v("any")]),s._v(" 章节看过的相同操作：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let value: unknown;\n\nvalue.foo.bar; // Error\nvalue.trim(); // Error\nvalue(); // Error\nnew value(); // Error\nvalue[0][1]; // Error\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("将 "),a("code",[s._v("value")]),s._v(" 变量类型设置为 "),a("code",[s._v("unknown")]),s._v(" 后，这些操作都不再被认为是类型正确的。通过将 "),a("code",[s._v("any")]),s._v(" 类型改变为 "),a("code",[s._v("unknown")]),s._v(" 类型，我们已将允许所有更改的默认设置，更改为禁止任何更改。")]),s._v(" "),a("h3",{attrs:{id:"_2-8-tuple-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-tuple-类型"}},[s._v("#")]),s._v(" 2.8 Tuple 类型")]),s._v(" "),a("p",[s._v("众所周知，数组一般由同种类型的值组成，但有时我们需要在单个变量中存储不同类型的值，这时候我们就可以使用元组。在 JavaScript 中是没有元组的，元组是 TypeScript 中特有的类型，其工作方式类似于数组。")]),s._v(" "),a("p",[s._v("元组可用于定义具有有限数量的未命名属性的类型。每个属性都有一个关联的类型。使用元组时，必须提供每个属性的值。为了更直观地理解元组的概念，我们来看一个具体的例子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let tupleType: [string, boolean];\ntupleType = ["Semlinker", true];\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("在上面代码中，我们定义了一个名为 "),a("code",[s._v("tupleType")]),s._v(" 的变量，它的类型是一个类型数组 "),a("code",[s._v("[string, boolean]")]),s._v("，然后我们按照正确的类型依次初始化 tupleType 变量。与数组一样，我们可以通过下标来访问元组中的元素：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("console.log(tupleType[0]); // Semlinker\nconsole.log(tupleType[1]); // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("在元组初始化的时候，如果出现类型不匹配的话，比如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('tupleType = [true, "Semlinker"];\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("此时，TypeScript 编译器会提示以下错误信息：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("[0]: Type 'true' is not assignable to type 'string'.\n[1]: Type 'string' is not assignable to type 'boolean'.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("很明显是因为类型不匹配导致的。在元组初始化的时候，我们还必须提供每个属性的值，不然也会出现错误，比如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('tupleType = ["Semlinker"];\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("此时，TypeScript 编译器会提示以下错误信息：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Property '1' is missing in type '[string]' but required in type '[string, boolean]'.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_2-9-void-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-void-类型"}},[s._v("#")]),s._v(" 2.9 Void 类型")]),s._v(" "),a("p",[s._v("某种程度上来说，void 类型像是与 any 类型相反，它表示没有任何类型。当一个函数没有返回值时，你通常会见到其返回值类型是 void：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 声明函数返回值为void\nfunction warnUser(): void {\n  console.log("This is my warning message");\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("以上代码编译生成的 ES5 代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('"use strict";\nfunction warnUser() {\n  console.log("This is my warning message");\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("需要注意的是，声明一个 void 类型的变量没有什么作用，因为它的值只能为 "),a("code",[s._v("undefined")]),s._v(" 或 "),a("code",[s._v("null")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let unusable: void = undefined;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_2-10-null-和-undefined-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-null-和-undefined-类型"}},[s._v("#")]),s._v(" 2.10 Null 和 Undefined 类型")]),s._v(" "),a("p",[s._v("TypeScript 里，"),a("code",[s._v("undefined")]),s._v(" 和 "),a("code",[s._v("null")]),s._v(" 两者有各自的类型分别为 "),a("code",[s._v("undefined")]),s._v(" 和 "),a("code",[s._v("null")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let u: undefined = undefined;\nlet n: null = null;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("默认情况下 "),a("code",[s._v("null")]),s._v(" 和 "),a("code",[s._v("undefined")]),s._v(" 是所有类型的子类型。 就是说你可以把 "),a("code",[s._v("null")]),s._v(" 和 "),a("code",[s._v("undefined")]),s._v(" 赋值给 "),a("code",[s._v("number")]),s._v(" 类型的变量。"),a("strong",[s._v("然而，如果你指定了"),a("code",[s._v("--strictNullChecks")]),s._v(" 标记，"),a("code",[s._v("null")]),s._v(" 和 "),a("code",[s._v("undefined")]),s._v(" 只能赋值给 "),a("code",[s._v("void")]),s._v(" 和它们各自的类型。")])]),s._v(" "),a("h3",{attrs:{id:"_2-11-never-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-11-never-类型"}},[s._v("#")]),s._v(" 2.11 Never 类型")]),s._v(" "),a("p",[a("code",[s._v("never")]),s._v(" 类型表示的是那些永不存在的值的类型。 例如，"),a("code",[s._v("never")]),s._v(" 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 返回never的函数必须存在无法达到的终点\nfunction error(message: string): never {\n  throw new Error(message);\n}\n\nfunction infiniteLoop(): never {\n  while (true) {}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("在 TypeScript 中，可以利用 never 类型的特性来实现全面性检查，具体示例如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type Foo = string | number;\n\nfunction controlFlowAnalysisWithNever(foo: Foo) {\n  if (typeof foo === "string") {\n    // 这里 foo 被收窄为 string 类型\n  } else if (typeof foo === "number") {\n    // 这里 foo 被收窄为 number 类型\n  } else {\n    // foo 在这里是 never\n    const check: never = foo;\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("注意在 else 分支里面，我们把收窄为 never 的 foo 赋值给一个显示声明的 never 变量。如果一切逻辑正确，那么这里应该能够编译通过。但是假如后来有一天你的同事修改了 Foo 的类型：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Foo = string | number | boolean;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然而他忘记同时修改 "),a("code",[s._v("controlFlowAnalysisWithNever")]),s._v(" 方法中的控制流程，这时候 else 分支的 foo 类型会被收窄为 "),a("code",[s._v("boolean")]),s._v(" 类型，导致无法赋值给 never 类型，这时就会产生一个编译错误。通过这个方式，我们可以确保")]),s._v(" "),a("p",[a("code",[s._v("controlFlowAnalysisWithNever")]),s._v(" 方法总是穷尽了 Foo 的所有可能类型。 通过这个示例，我们可以得出一个结论："),a("strong",[s._v("使用 never 避免出现新增了联合类型没有对应的实现，目的就是写出类型绝对安全的代码。")])]),s._v(" "),a("h2",{attrs:{id:"三、typescript-断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、typescript-断言"}},[s._v("#")]),s._v(" 三、TypeScript 断言")]),s._v(" "),a("p",[s._v("有时候你会遇到这样的情况，你会比 TypeScript 更了解某个值的详细信息。通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。")]),s._v(" "),a("p",[s._v("通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。类型断言好比其他语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。")]),s._v(" "),a("p",[s._v("类型断言有两种形式：")]),s._v(" "),a("h3",{attrs:{id:"_3-1-尖括号-语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-尖括号-语法"}},[s._v("#")]),s._v(" 3.1 “尖括号” 语法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let someValue: any = "this is a string";\nlet strLength: number = (<string>someValue).length;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_3-2-as-语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-as-语法"}},[s._v("#")]),s._v(" 3.2 as 语法")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let someValue: any = "this is a string";\nlet strLength: number = (someValue as string).length;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"四、类型守卫"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、类型守卫"}},[s._v("#")]),s._v(" 四、类型守卫")]),s._v(" "),a("blockquote",[a("p",[s._v("A type guard is some expression that performs a runtime check that guarantees the type in some scope. —— TypeScript 官方文档")])]),s._v(" "),a("p",[s._v("类型保护是可执行运行时检查的一种表达式，用于确保该类型在一定的范围内。换句话说，类型保护可以保证一个字符串是一个字符串，尽管它的值也可以是一个数值。类型保护与特性检测并不是完全不同，其主要思想是尝试检测属性、方法或原型，以确定如何处理值。目前主要有四种的方式来实现类型保护：")]),s._v(" "),a("h3",{attrs:{id:"_4-1-in-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-in-关键字"}},[s._v("#")]),s._v(" 4.1 in 关键字")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('interface Admin {\n  name: string;\n  privileges: string[];\n}\n\ninterface Employee {\n  name: string;\n  startDate: Date;\n}\n\ntype UnknownEmployee = Employee | Admin;\n\nfunction printEmployeeInformation(emp: UnknownEmployee) {\n  console.log("Name: " + emp.name);\n  if ("privileges" in emp) {\n    console.log("Privileges: " + emp.privileges);\n  }\n  if ("startDate" in emp) {\n    console.log("Start Date: " + emp.startDate);\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("h3",{attrs:{id:"_4-2-typeof-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-typeof-关键字"}},[s._v("#")]),s._v(" 4.2 typeof 关键字")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function padLeft(value: string, padding: string | number) {\n  if (typeof padding === "number") {\n      return Array(padding + 1).join(" ") + value;\n  }\n  if (typeof padding === "string") {\n      return padding + value;\n  }\n  throw new Error(`Expected string or number, got \'${padding}\'.`);\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("code",[s._v("typeof")]),s._v(" 类型保护只支持两种形式："),a("code",[s._v('typeof v === "typename"')]),s._v(" 和 "),a("code",[s._v("typeof v !== typename")]),s._v("，"),a("code",[s._v('"typename"')]),s._v(" 必须是 "),a("code",[s._v('"number"')]),s._v("， "),a("code",[s._v('"string"')]),s._v("， "),a("code",[s._v('"boolean"')]),s._v(" 或 "),a("code",[s._v('"symbol"')]),s._v("。 但是 TypeScript 并不会阻止你与其它字符串比较，语言不会把那些表达式识别为类型保护。")]),s._v(" "),a("h3",{attrs:{id:"_4-3-instanceof-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-instanceof-关键字"}},[s._v("#")]),s._v(" 4.3 instanceof 关键字")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Padder {\n  getPaddingString(): string;\n}\n\nclass SpaceRepeatingPadder implements Padder {\n  constructor(private numSpaces: number) {}\n  getPaddingString() {\n    return Array(this.numSpaces + 1).join(\" \");\n  }\n}\n\nclass StringPadder implements Padder {\n  constructor(private value: string) {}\n  getPaddingString() {\n    return this.value;\n  }\n}\n\nlet padder: Padder = new SpaceRepeatingPadder(6);\n\nif (padder instanceof SpaceRepeatingPadder) {\n  // padder的类型收窄为 'SpaceRepeatingPadder'\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h3",{attrs:{id:"_4-4-自定义类型保护的类型谓词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-自定义类型保护的类型谓词"}},[s._v("#")]),s._v(" 4.4 自定义类型保护的类型谓词")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function isNumber(x: any): x is number {\n  return typeof x === "number";\n}\n\nfunction isString(x: any): x is string {\n  return typeof x === "string";\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"五、联合类型和类型别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、联合类型和类型别名"}},[s._v("#")]),s._v(" 五、联合类型和类型别名")]),s._v(" "),a("h3",{attrs:{id:"_5-1-联合类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-联合类型"}},[s._v("#")]),s._v(" 5.1 联合类型")]),s._v(" "),a("p",[s._v("联合类型通常与 "),a("code",[s._v("null")]),s._v(" 或 "),a("code",[s._v("undefined")]),s._v(" 一起使用：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const sayHello = (name: string | undefined) => {\n  /* ... */\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("例如，这里 "),a("code",[s._v("name")]),s._v(" 的类型是 "),a("code",[s._v("string | undefined")]),s._v(" 意味着可以将 "),a("code",[s._v("string")]),s._v(" 或 "),a("code",[s._v("undefined")]),s._v(" 的值传递给"),a("code",[s._v("sayHello")]),s._v(" 函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('sayHello("Semlinker");\nsayHello(undefined);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("通过这个示例，你可以凭直觉知道类型 A 和类型 B 联合后的类型是同时接受 A 和 B 值的类型。")]),s._v(" "),a("h3",{attrs:{id:"_5-2-可辨识联合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-可辨识联合"}},[s._v("#")]),s._v(" 5.2 可辨识联合")]),s._v(" "),a("p",[s._v("TypeScript 可辨识联合（Discriminated Unions）类型，也称为代数数据类型或标签联合类型。"),a("strong",[s._v("它包含 3 个要点：可辨识、联合类型和类型守卫。")])]),s._v(" "),a("p",[s._v("这种类型的本质是结合联合类型和字面量类型的一种类型保护方法。"),a("strong",[s._v("如果一个类型是多个类型的联合类型，且多个类型含有一个公共属性，那么就可以利用这个公共属性，来创建不同的类型保护区块。")])]),s._v(" "),a("p",[a("strong",[s._v("1.可辨识")])]),s._v(" "),a("p",[s._v("可辨识要求联合类型中的每个元素都含有一个单例类型属性，比如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('enum CarTransmission {\n  Automatic = 200,\n  Manual = 300\n}\n\ninterface Motorcycle {\n  vType: "motorcycle"; // discriminant\n  make: number; // year\n}\n\ninterface Car {\n  vType: "car"; // discriminant\n  transmission: CarTransmission\n}\n\ninterface Truck {\n  vType: "truck"; // discriminant\n  capacity: number; // in tons\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("在上述代码中，我们分别定义了 "),a("code",[s._v("Motorcycle")]),s._v("、 "),a("code",[s._v("Car")]),s._v(" 和 "),a("code",[s._v("Truck")]),s._v(" 三个接口，在这些接口中都包含一个 "),a("code",[s._v("vType")]),s._v(" 属性，该属性被称为可辨识的属性，而其它的属性只跟特性的接口相关。")]),s._v(" "),a("p",[a("strong",[s._v("2.联合类型")])]),s._v(" "),a("p",[s._v("基于前面定义了三个接口，我们可以创建一个 "),a("code",[s._v("Vehicle")]),s._v(" 联合类型：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Vehicle = Motorcycle | Car | Truck;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("现在我们就可以开始使用 "),a("code",[s._v("Vehicle")]),s._v(" 联合类型，对于 "),a("code",[s._v("Vehicle")]),s._v(" 类型的变量，它可以表示不同类型的车辆。")]),s._v(" "),a("p",[a("strong",[s._v("3.类型守卫")])]),s._v(" "),a("p",[s._v("下面我们来定义一个 "),a("code",[s._v("evaluatePrice")]),s._v(" 方法，该方法用于根据车辆的类型、容量和评估因子来计算价格，具体实现如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const EVALUATION_FACTOR = Math.PI; \nfunction evaluatePrice(vehicle: Vehicle) {\n  return vehicle.capacity * EVALUATION_FACTOR;\n}\n\nconst myTruck: Truck = { vType: "truck", capacity: 9.5 };\nevaluatePrice(myTruck);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("对于以上代码，TypeScript 编译器将会提示以下错误信息：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Property 'capacity' does not exist on type 'Vehicle'.\nProperty 'capacity' does not exist on type 'Motorcycle'.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("原因是在 Motorcycle 接口中，并不存在 "),a("code",[s._v("capacity")]),s._v(" 属性，而对于 Car 接口来说，它也不存在 "),a("code",[s._v("capacity")]),s._v(" 属性。那么，现在我们应该如何解决以上问题呢？这时，我们可以使用类型守卫。下面我们来重构一下前面定义的 "),a("code",[s._v("evaluatePrice")]),s._v(" 方法，重构后的代码如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function evaluatePrice(vehicle: Vehicle) {\n  switch(vehicle.vType) {\n    case "car":\n      return vehicle.transmission * EVALUATION_FACTOR;\n    case "truck":\n      return vehicle.capacity * EVALUATION_FACTOR;\n    case "motorcycle":\n      return vehicle.make * EVALUATION_FACTOR;\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("在以上代码中，我们使用 "),a("code",[s._v("switch")]),s._v(" 和 "),a("code",[s._v("case")]),s._v(" 运算符来实现类型守卫，从而确保在 "),a("code",[s._v("evaluatePrice")]),s._v(" 方法中，我们可以安全地访问 "),a("code",[s._v("vehicle")]),s._v(" 对象中的所包含的属性，来正确的计算该车辆类型所对应的价格。")]),s._v(" "),a("h3",{attrs:{id:"_5-3-类型别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-类型别名"}},[s._v("#")]),s._v(" 5.3 类型别名")]),s._v(" "),a("p",[s._v("类型别名用来给一个类型起个新名字。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type Message = string | string[];\n\nlet greet = (message: Message) => {\n  // ...\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"六、交叉类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、交叉类型"}},[s._v("#")]),s._v(" 六、交叉类型")]),s._v(" "),a("p",[s._v("TypeScript 交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface IPerson {\n  id: string;\n  age: number;\n}\n\ninterface IWorker {\n  companyId: string;\n}\n\ntype IStaff = IPerson & IWorker;\n\nconst staff: IStaff = {\n  id: 'E1006',\n  age: 33,\n  companyId: 'EFT'\n};\n\nconsole.dir(staff)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("在上面示例中，我们首先为 IPerson 和 IWorker 类型定义了不同的成员，然后通过 "),a("code",[s._v("&")]),s._v(" 运算符定义了 IStaff 交叉类型，所以该类型同时拥有 IPerson 和 IWorker 这两种类型的成员。")]),s._v(" "),a("h2",{attrs:{id:"七、typescript-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、typescript-函数"}},[s._v("#")]),s._v(" 七、TypeScript 函数")]),s._v(" "),a("h3",{attrs:{id:"_7-1-typescript-函数与-javascript-函数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-typescript-函数与-javascript-函数的区别"}},[s._v("#")]),s._v(" 7.1 TypeScript 函数与 JavaScript 函数的区别")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("TypeScript")]),s._v(" "),a("th",[s._v("JavaScript")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("含有类型")]),s._v(" "),a("td",[s._v("无类型")])]),s._v(" "),a("tr",[a("td",[s._v("箭头函数")]),s._v(" "),a("td",[s._v("箭头函数（ES2015）")])]),s._v(" "),a("tr",[a("td",[s._v("函数类型")]),s._v(" "),a("td",[s._v("无函数类型")])]),s._v(" "),a("tr",[a("td",[s._v("必填和可选参数")]),s._v(" "),a("td",[s._v("所有参数都是可选的")])]),s._v(" "),a("tr",[a("td",[s._v("默认参数")]),s._v(" "),a("td",[s._v("默认参数")])]),s._v(" "),a("tr",[a("td",[s._v("剩余参数")]),s._v(" "),a("td",[s._v("剩余参数")])]),s._v(" "),a("tr",[a("td",[s._v("函数重载")]),s._v(" "),a("td",[s._v("无函数重载")])])])]),s._v(" "),a("h3",{attrs:{id:"_7-2-箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-箭头函数"}},[s._v("#")]),s._v(" 7.2 箭头函数")]),s._v(" "),a("p",[a("strong",[s._v("1.常见语法")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("myBooks.forEach(() => console.log('reading'));\n\nmyBooks.forEach(title => console.log(title));\n\nmyBooks.forEach((title, idx, arr) =>\n  console.log(idx + '-' + title);\n);\n\nmyBooks.forEach((title, idx, arr) => {\n  console.log(idx + '-' + title);\n});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("strong",[s._v("2.使用示例")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 未使用箭头函数\nfunction Book() {\n  let self = this;\n  self.publishDate = 2016;\n  setInterval(function () {\n    console.log(self.publishDate);\n  }, 1000);\n}\n\n// 使用箭头函数\nfunction Book() {\n  this.publishDate = 2016;\n  setInterval(() => {\n    console.log(this.publishDate);\n  }, 1000);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h3",{attrs:{id:"_7-3-参数类型和返回类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-参数类型和返回类型"}},[s._v("#")]),s._v(" 7.3 参数类型和返回类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function createUserId(name: string, id: number): string {\n  return name + id;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"_7-4-函数类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-函数类型"}},[s._v("#")]),s._v(" 7.4 函数类型")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let IdGenerator: (chars: string, nums: number) => string;\n\nfunction createUserId(name: string, id: number): string {\n  return name + id;\n}\n\nIdGenerator = createUserId;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"_7-5-可选参数及默认参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-可选参数及默认参数"}},[s._v("#")]),s._v(" 7.5 可选参数及默认参数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 可选参数\nfunction createUserId(name: string, id: number, age?: number): string {\n  return name + id;\n}\n\n// 默认参数\nfunction createUserId(\n  name: string = "Semlinker",\n  id: number,\n  age?: number\n): string {\n  return name + id;\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("在声明函数时，可以通过 "),a("code",[s._v("?")]),s._v(" 号来定义可选参数，比如 "),a("code",[s._v("age?: number")]),s._v(" 这种形式。在实际使用时，需要注意的是可选参数要放在普通参数的后面，不然会导致编译错误。")]),s._v(" "),a("h3",{attrs:{id:"_7-6-剩余参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-剩余参数"}},[s._v("#")]),s._v(" 7.6 剩余参数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function push(array, ...items) {\n  items.forEach(function (item) {\n    array.push(item);\n  });\n}\n\nlet a = [];\npush(a, 1, 2, 3);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"_7-7-函数重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-函数重载"}},[s._v("#")]),s._v(" 7.7 函数重载")]),s._v(" "),a("p",[s._v("函数重载或方法重载是使用相同名称和不同参数数量或类型创建多个方法的一种能力。要解决前面遇到的问题，方法就是为同一个函数提供多个函数类型定义来进行函数重载，编译器会根据这个列表去处理函数的调用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function add(a: number, b: number): number;\nfunction add(a: string, b: string): string;\nfunction add(a: string, b: number): string;\nfunction add(a: number, b: string): string;\nfunction add(a: Combinable, b: Combinable) {\n  if (typeof a === "string" || typeof b === "string") {\n    return a.toString() + b.toString();\n  }\n  return a + b;\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("在以上代码中，我们为 add 函数提供了多个函数类型定义，从而实现函数的重载。之后，可恶的错误消息又消失了，因为这时 result 变量的类型是 "),a("code",[s._v("string")]),s._v(" 类型。在 TypeScript 中除了可以重载普通函数之外，我们还可以重载类中的成员方法。")]),s._v(" "),a("p",[s._v("方法重载是指在同一个类中方法同名，参数不同（参数类型不同、参数个数不同或参数个数相同时参数的先后顺序不同），调用时根据实参的形式，选择与它匹配的方法执行操作的一种技术。所以类中成员方法满足重载的条件是：在同一个类中，方法名相同且参数列表不同。下面我们来举一个成员方法重载的例子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Calculator {\n  add(a: number, b: number): number;\n  add(a: string, b: string): string;\n  add(a: string, b: number): string;\n  add(a: number, b: string): string;\n  add(a: Combinable, b: Combinable) {\n    if (typeof a === "string" || typeof b === "string") {\n      return a.toString() + b.toString();\n    }\n    return a + b;\n  }\n}\n\nconst calculator = new Calculator();\nconst result = calculator.add("Semlinker", " Kakuqo");\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("这里需要注意的是，当 TypeScript 编译器处理函数重载时，它会查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个。 因此，在定义重载的时候，一定要把最精确的定义放在最前面。另外在 Calculator 类中，"),a("code",[s._v("add(a: Combinable, b: Combinable){ }")]),s._v(" 并不是重载列表的一部分，因此对于 add 成员方法来说，我们只定义了四个重载方法。")]),s._v(" "),a("h2",{attrs:{id:"八、typescript-数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、typescript-数组"}},[s._v("#")]),s._v(" 八、TypeScript 数组")]),s._v(" "),a("h3",{attrs:{id:"_8-1-数组解构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-数组解构"}},[s._v("#")]),s._v(" 8.1 数组解构")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let x: number; let y: number; let z: number;\nlet five_array = [0,1,2,3,4];\n[x,y,z] = five_array;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"_8-2-数组展开运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-数组展开运算符"}},[s._v("#")]),s._v(" 8.2 数组展开运算符")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let two_array = [0, 1];\nlet five_array = [...two_array, 2, 3, 4];\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_8-3-数组遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-数组遍历"}},[s._v("#")]),s._v(" 8.3 数组遍历")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let colors: string[] = ["red", "green", "blue"];\nfor (let i of colors) {\n  console.log(i);\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"九、typescript-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九、typescript-对象"}},[s._v("#")]),s._v(" 九、TypeScript 对象")]),s._v(" "),a("h3",{attrs:{id:"_9-1-对象解构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-对象解构"}},[s._v("#")]),s._v(" 9.1 对象解构")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let person = {\n  name: "Semlinker",\n  gender: "Male",\n};\n\nlet { name, gender } = person;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"_9-2-对象展开运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-对象展开运算符"}},[s._v("#")]),s._v(" 9.2 对象展开运算符")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let person = {\n  name: "Semlinker",\n  gender: "Male",\n  address: "Xiamen",\n};\n\n// 组装对象\nlet personWithAge = { ...person, age: 33 };\n\n// 获取除了某些项外的其它项\nlet { name, ...rest } = person;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h2",{attrs:{id:"十、typescript-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十、typescript-接口"}},[s._v("#")]),s._v(" 十、TypeScript 接口")]),s._v(" "),a("p",[s._v("在面向对象语言中，接口是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类去实现。")]),s._v(" "),a("p",[s._v("TypeScript 中的接口是一个非常灵活的概念，除了可用于"),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fts.xcatliu.com%2Fadvanced%2Fclass-and-interfaces.html%23%25E7%25B1%25BB%25E5%25AE%259E%25E7%258E%25B0%25E6%258E%25A5%25E5%258F%25A3",title:"https://ts.xcatliu.com/advanced/class-and-interfaces.html#%E7%B1%BB%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3",target:"_blank",rel:"noopener noreferrer"}},[s._v("对类的一部分行为进行抽象"),a("OutboundLink")],1),s._v("以外，也常用于对「对象的形状（Shape）」进行描述。")]),s._v(" "),a("h3",{attrs:{id:"_10-1-对象的形状"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-1-对象的形状"}},[s._v("#")]),s._v(" 10.1 对象的形状")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('interface Person {\n  name: string;\n  age: number;\n}\n\nlet Semlinker: Person = {\n  name: "Semlinker",\n  age: 33,\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"_10-2-可选-只读属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-2-可选-只读属性"}},[s._v("#")]),s._v(" 10.2 可选 | 只读属性")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Person {\n  readonly name: string;\n  age?: number;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("只读属性用于限制只能在对象刚刚创建的时候修改其值。此外 TypeScript 还提供了 "),a("code",[s._v("ReadonlyArray<T>")]),s._v(" 类型，它与 "),a("code",[s._v("Array<T>")]),s._v(" 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let a: number[] = [1, 2, 3, 4];\nlet ro: ReadonlyArray<number> = a;\nro[0] = 12; // error!\nro.push(5); // error!\nro.length = 100; // error!\na = ro; // error!\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"十一、typescript-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十一、typescript-类"}},[s._v("#")]),s._v(" 十一、TypeScript 类")]),s._v(" "),a("h3",{attrs:{id:"_11-1-类的属性与方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-1-类的属性与方法"}},[s._v("#")]),s._v(" 11.1 类的属性与方法")]),s._v(" "),a("p",[s._v("在面向对象语言中，类是一种面向对象计算机编程语言的构造，是创建对象的蓝图，描述了所创建的对象共同的属性和方法。")]),s._v(" "),a("p",[s._v("在 TypeScript 中，我们可以通过 "),a("code",[s._v("Class")]),s._v(" 关键字来定义一个类：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Greeter {\n  // 静态属性\n  static cname: string = "Greeter";\n  // 成员属性\n  greeting: string;\n\n  // 构造函数 - 执行初始化操作\n  constructor(message: string) {\n    this.greeting = message;\n  }\n\n  // 静态方法\n  static getClassName() {\n    return "Class name is Greeter";\n  }\n\n  // 成员方法\n  greet() {\n    return "Hello, " + this.greeting;\n  }\n}\n\nlet greeter = new Greeter("world");\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("那么成员属性与静态属性，成员方法与静态方法有什么区别呢？这里无需过多解释，我们直接看一下以下编译生成的 ES5 代码：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('"use strict";\nvar Greeter = /** @class */ (function () {\n    // 构造函数 - 执行初始化操作\n    function Greeter(message) {\n        this.greeting = message;\n    }\n    // 静态方法\n    Greeter.getClassName = function () {\n        return "Class name is Greeter";\n    };\n    // 成员方法\n    Greeter.prototype.greet = function () {\n        return "Hello, " + this.greeting;\n    };\n    // 静态属性\n    Greeter.cname = "Greeter";\n    return Greeter;\n}());\nvar greeter = new Greeter("world");\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h3",{attrs:{id:"_11-2-访问器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-2-访问器"}},[s._v("#")]),s._v(" 11.2 访问器")]),s._v(" "),a("p",[s._v("在 TypeScript 中，我们可以通过 "),a("code",[s._v("getter")]),s._v(" 和 "),a("code",[s._v("setter")]),s._v(" 方法来实现数据的封装和有效性校验，防止出现异常数据。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let passcode = "Hello TypeScript";\n\nclass Employee {\n  private _fullName: string;\n\n  get fullName(): string {\n    return this._fullName;\n  }\n\n  set fullName(newName: string) {\n    if (passcode && passcode == "Hello TypeScript") {\n      this._fullName = newName;\n    } else {\n      console.log("Error: Unauthorized update of employee!");\n    }\n  }\n}\n\nlet employee = new Employee();\nemployee.fullName = "Semlinker";\nif (employee.fullName) {\n  console.log(employee.fullName);\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h3",{attrs:{id:"_11-3-类的继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-3-类的继承"}},[s._v("#")]),s._v(" 11.3 类的继承")]),s._v(" "),a("p",[s._v("继承 (Inheritance) 是一种联结类与类的层次模型。指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力，继承是类与类或者接口与接口之间最常见的关系。")]),s._v(" "),a("p",[s._v("继承是一种 "),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fzh.wikipedia.org%2Fwiki%2FIs-a",title:"https://zh.wikipedia.org/wiki/Is-a",target:"_blank",rel:"noopener noreferrer"}},[s._v("is-a "),a("OutboundLink")],1),s._v("关系：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6703e54d7c64717992fb797a344b02d~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),s._v(" "),a("p",[s._v("在 TypeScript 中，我们可以通过 "),a("code",[s._v("extends")]),s._v(" 关键字来实现继承：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Animal {\n  name: string;\n  \n  constructor(theName: string) {\n    this.name = theName;\n  }\n  \n  move(distanceInMeters: number = 0) {\n    console.log(`${this.name} moved ${distanceInMeters}m.`);\n  }\n}\n\nclass Snake extends Animal {\n  constructor(name: string) {\n    super(name);\n  }\n  \n  move(distanceInMeters = 5) {\n    console.log("Slithering...");\n    super.move(distanceInMeters);\n  }\n}\n\nlet sam = new Snake("Sammy the Python");\nsam.move();\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("h3",{attrs:{id:"_11-4-ecmascript-私有字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-4-ecmascript-私有字段"}},[s._v("#")]),s._v(" 11.4 ECMAScript 私有字段")]),s._v(" "),a("p",[s._v("在 TypeScript 3.8 版本就开始支持"),a("strong",[s._v("ECMAScript 私有字段")]),s._v("，使用方式如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Person {\n  #name: string;\n\n  constructor(name: string) {\n    this.#name = name;\n  }\n\n  greet() {\n    console.log(`Hello, my name is ${this.#name}!`);\n  }\n}\n\nlet semlinker = new Person(\"Semlinker\");\n\nsemlinker.#name;\n//     ~~~~~\n// Property '#name' is not accessible outside class 'Person'\n// because it has a private identifier.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("与常规属性（甚至使用 "),a("code",[s._v("private")]),s._v(" 修饰符声明的属性）不同，私有字段要牢记以下规则：")]),s._v(" "),a("ul",[a("li",[s._v("私有字段以 "),a("code",[s._v("#")]),s._v(" 字符开头，有时我们称之为私有名称；")]),s._v(" "),a("li",[s._v("每个私有字段名称都唯一地限定于其包含的类；")]),s._v(" "),a("li",[s._v("不能在私有字段上使用 TypeScript 可访问性修饰符（如 public 或 private）；")]),s._v(" "),a("li",[s._v("私有字段不能在包含的类之外访问，甚至不能被检测到。")])]),s._v(" "),a("h2",{attrs:{id:"十二、typescript-泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十二、typescript-泛型"}},[s._v("#")]),s._v(" 十二、TypeScript 泛型")]),s._v(" "),a("p",[s._v("软件工程中，我们不仅要创建一致的定义良好的 API，同时也要考虑可重用性。 组件不仅能够支持当前的数据类型，同时也能支持未来的数据类型，这在创建大型系统时为你提供了十分灵活的功能。")]),s._v(" "),a("p",[a("strong",[s._v("在像 C# 和 Java 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。 这样用户就可以以自己的数据类型来使用组件。")])]),s._v(" "),a("p",[s._v("设计泛型的关键目的是在成员之间提供有意义的约束，这些成员可以是：类的实例成员、类的方法、函数参数和函数返回值。")]),s._v(" "),a("p",[s._v("泛型（Generics）是允许同一个函数接受不同类型参数的一种模板。相比于使用 any 类型，使用泛型来创建可复用的组件要更好，因为泛型会保留参数类型。")]),s._v(" "),a("h3",{attrs:{id:"_12-1-泛型接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-1-泛型接口"}},[s._v("#")]),s._v(" 12.1 泛型接口")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface GenericIdentityFn<T> {\n  (arg: T): T;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"_12-2-泛型类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-2-泛型类"}},[s._v("#")]),s._v(" 12.2 泛型类")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class GenericNumber<T> {\n  zeroValue: T;\n  add: (x: T, y: T) => T;\n}\n\nlet myGenericNumber = new GenericNumber<number>();\nmyGenericNumber.zeroValue = 0;\nmyGenericNumber.add = function (x, y) {\n  return x + y;\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"_12-3-泛型变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-3-泛型变量"}},[s._v("#")]),s._v(" 12.3 泛型变量")]),s._v(" "),a("p",[s._v("对刚接触 TypeScript 泛型的小伙伴来说，看到 T 和 E，还有 K 和 V 这些泛型变量时，估计会一脸懵逼。其实这些大写字母并没有什么本质的区别，只不过是一个约定好的规范而已。也就是说使用大写字母 A-Z 定义的类型变量都属于泛型，把 T 换成 A，也是一样的。下面我们介绍一下一些常见泛型变量代表的意思：")]),s._v(" "),a("ul",[a("li",[s._v("T（Type）：表示一个 TypeScript 类型")]),s._v(" "),a("li",[s._v("K（Key）：表示对象中的键类型")]),s._v(" "),a("li",[s._v("V（Value）：表示对象中的值类型")]),s._v(" "),a("li",[s._v("E（Element）：表示元素类型")])]),s._v(" "),a("h3",{attrs:{id:"_12-4-泛型工具类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-4-泛型工具类型"}},[s._v("#")]),s._v(" 12.4 泛型工具类型")]),s._v(" "),a("p",[s._v("为了方便开发者 TypeScript 内置了一些常用的工具类型，比如 Partial、Required、Readonly、Record 和 ReturnType 等。出于篇幅考虑，这里我们只简单介绍 Partial 工具类型。不过在具体介绍之前，我们得先介绍一些相关的基础知识，方便读者自行学习其它的工具类型。")]),s._v(" "),a("p",[a("strong",[s._v("1.typeof")])]),s._v(" "),a("p",[s._v("在 TypeScript 中，"),a("code",[s._v("typeof")]),s._v(" 操作符可以用来获取一个变量声明或对象的类型。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Person {\n  name: string;\n  age: number;\n}\n\nconst sem: Person = { name: 'semlinker', age: 30 };\ntype Sem= typeof sem; // -> Person\n\nfunction toArray(x: number): Array<number> {\n  return [x];\n}\n\ntype Func = typeof toArray; // -> (x: number) => number[]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[a("strong",[s._v("2.keyof")])]),s._v(" "),a("p",[a("code",[s._v("keyof")]),s._v(" 操作符可以用来一个对象中的所有 key 值：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('interface Person {\n    name: string;\n    age: number;\n}\n\ntype K1 = keyof Person; // "name" | "age"\ntype K2 = keyof Person[]; // "length" | "toString" | "pop" | "push" | "concat" | "join" \ntype K3 = keyof { [x: string]: Person };  // string | number\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("3.in")])]),s._v(" "),a("p",[a("code",[s._v("in")]),s._v(" 用来遍历枚举类型：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type Keys = "a" | "b" | "c"\n\ntype Obj =  {\n  [p in Keys]: any\n} // -> { a: any, b: any, c: any }\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("4.infer")])]),s._v(" "),a("p",[s._v("在条件类型语句中，可以用 "),a("code",[s._v("infer")]),s._v(" 声明一个类型变量并且对它进行使用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type ReturnType<T> = T extends (\n  ...args: any[]\n) => infer R ? R : any;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("以上代码中 "),a("code",[s._v("infer R")]),s._v(" 就是声明一个变量来承载传入函数签名的返回值类型，简单说就是用它取到函数返回值的类型方便之后使用。")]),s._v(" "),a("p",[a("strong",[s._v("5.extends")])]),s._v(" "),a("p",[s._v("有时候我们定义的泛型不想过于灵活或者说想继承某些类等，可以通过 extends 关键字添加泛型约束。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface ILengthwise {\n  length: number;\n}\n\nfunction loggingIdentity<T extends ILengthwise>(arg: T): T {\n  console.log(arg.length);\n  return arg;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("现在这个泛型函数被定义了约束，因此它不再是适用于任意类型：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("loggingIdentity(3);  // Error, number doesn't have a .length property\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这时我们需要传入符合约束类型的值，必须包含必须的属性：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("loggingIdentity({length: 10, value: 3});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("6.Partial")])]),s._v(" "),a("p",[a("code",[s._v("Partial<T>")]),s._v(" 的作用就是将某个类型里的属性全部变为可选项 "),a("code",[s._v("?")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("定义：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n * node_modules/typescript/lib/lib.es5.d.ts\n * Make all properties in T optional\n */\ntype Partial<T> = {\n  [P in keyof T]?: T[P];\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("在以上代码中，首先通过 "),a("code",[s._v("keyof T")]),s._v(" 拿到 "),a("code",[s._v("T")]),s._v(" 的所有属性名，然后使用 "),a("code",[s._v("in")]),s._v(" 进行遍历，将值赋给 "),a("code",[s._v("P")]),s._v("，最后通过 "),a("code",[s._v("T[P]")]),s._v(" 取得相应的属性值。中间的 "),a("code",[s._v("?")]),s._v(" 号，用于将所有属性变为可选。")]),s._v(" "),a("p",[a("strong",[s._v("示例：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('interface Todo {\n  title: string;\n  description: string;\n}\n\nfunction updateTodo(todo: Todo, fieldsToUpdate: Partial<Todo>) {\n  return { ...todo, ...fieldsToUpdate };\n}\n\nconst todo1 = {\n  title: "organize desk",\n  description: "clear clutter",\n};\n\nconst todo2 = updateTodo(todo1, {\n  description: "throw out trash",\n});\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[s._v("在上面的 "),a("code",[s._v("updateTodo")]),s._v(" 方法中，我们利用 "),a("code",[s._v("Partial<T>")]),s._v(" 工具类型，定义 "),a("code",[s._v("fieldsToUpdate")]),s._v(" 的类型为 "),a("code",[s._v("Partial<Todo>")]),s._v("，即：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("{\n   title?: string | undefined;\n   description?: string | undefined;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"十三、typescript-装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十三、typescript-装饰器"}},[s._v("#")]),s._v(" 十三、TypeScript 装饰器")]),s._v(" "),a("h3",{attrs:{id:"_13-1-装饰器是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-1-装饰器是什么"}},[s._v("#")]),s._v(" 13.1 装饰器是什么")]),s._v(" "),a("ul",[a("li",[s._v("它是一个表达式")]),s._v(" "),a("li",[s._v("该表达式被执行后，返回一个函数")]),s._v(" "),a("li",[s._v("函数的入参分别为 target、name 和 descriptor")]),s._v(" "),a("li",[s._v("执行该函数后，可能返回 descriptor 对象，用于配置 target 对象")])]),s._v(" "),a("h3",{attrs:{id:"_13-2-装饰器的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-2-装饰器的分类"}},[s._v("#")]),s._v(" 13.2 装饰器的分类")]),s._v(" "),a("ul",[a("li",[s._v("类装饰器（Class decorators）")]),s._v(" "),a("li",[s._v("属性装饰器（Property decorators）")]),s._v(" "),a("li",[s._v("方法装饰器（Method decorators）")]),s._v(" "),a("li",[s._v("参数装饰器（Parameter decorators）")])]),s._v(" "),a("h3",{attrs:{id:"_13-3-类装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-3-类装饰器"}},[s._v("#")]),s._v(" 13.3 类装饰器")]),s._v(" "),a("p",[s._v("类装饰器声明：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("declare type ClassDecorator = <TFunction extends Function>(\n  target: TFunction\n) => TFunction | void;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("类装饰器顾名思义，就是用来装饰类的。它接收一个参数：")]),s._v(" "),a("ul",[a("li",[s._v("target: TFunction - 被装饰的类")])]),s._v(" "),a("p",[s._v("看完第一眼后，是不是感觉都不好了。没事，我们马上来个例子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Greeter(target: Function): void {\n  target.prototype.greet = function (): void {\n    console.log(\"Hello Semlinker!\");\n  };\n}\n\n@Greeter\nclass Greeting {\n  constructor() {\n    // 内部实现\n  }\n}\n\nlet myGreeting = new Greeting();\nmyGreeting.greet(); // console output: 'Hello Semlinker!';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("上面的例子中，我们定义了 "),a("code",[s._v("Greeter")]),s._v(" 类装饰器，同时我们使用了 "),a("code",[s._v("@Greeter")]),s._v(" 语法糖，来使用装饰器。")]),s._v(" "),a("blockquote",[a("p",[s._v("友情提示：读者可以直接复制上面的代码，在 "),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.typescriptlang.org%2Fplay%2Findex.html",title:"https://www.typescriptlang.org/play/index.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("TypeScript Playground"),a("OutboundLink")],1),s._v(" 中运行查看结果。")])]),s._v(" "),a("p",[s._v("有的读者可能想问，例子中总是输出 "),a("code",[s._v("Hello Semlinker!")]),s._v(" ，能自定义输出的问候语么 ？这个问题很好，答案是可以的。")]),s._v(" "),a("p",[s._v("具体实现如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Greeter(greeting: string) {\n  return function (target: Function) {\n    target.prototype.greet = function (): void {\n      console.log(greeting);\n    };\n  };\n}\n\n@Greeter(\"Hello TS!\")\nclass Greeting {\n  constructor() {\n    // 内部实现\n  }\n}\n\nlet myGreeting = new Greeting();\nmyGreeting.greet(); // console output: 'Hello TS!';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h3",{attrs:{id:"_13-4-属性装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-4-属性装饰器"}},[s._v("#")]),s._v(" 13.4 属性装饰器")]),s._v(" "),a("p",[s._v("属性装饰器声明：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("declare type PropertyDecorator = (target:Object, \n  propertyKey: string | symbol ) => void;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("属性装饰器顾名思义，用来装饰类的属性。它接收两个参数：")]),s._v(" "),a("ul",[a("li",[s._v("target: Object - 被装饰的类")]),s._v(" "),a("li",[s._v("propertyKey: string | symbol - 被装饰类的属性名")])]),s._v(" "),a("p",[s._v("趁热打铁，马上来个例子热热身：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function logProperty(target: any, key: string) {\n  delete target[key];\n\n  const backingField = "_" + key;\n\n  Object.defineProperty(target, backingField, {\n    writable: true,\n    enumerable: true,\n    configurable: true\n  });\n\n  // property getter\n  const getter = function (this: any) {\n    const currVal = this[backingField];\n    console.log(`Get: ${key} => ${currVal}`);\n    return currVal;\n  };\n\n  // property setter\n  const setter = function (this: any, newVal: any) {\n    console.log(`Set: ${key} => ${newVal}`);\n    this[backingField] = newVal;\n  };\n\n  // Create new property with getter and setter\n  Object.defineProperty(target, key, {\n    get: getter,\n    set: setter,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nclass Person { \n  @logProperty\n  public name: string;\n\n  constructor(name : string) { \n    this.name = name;\n  }\n}\n\nconst p1 = new Person("semlinker");\np1.name = "kakuqo";\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br")])]),a("p",[s._v("以上代码我们定义了一个 "),a("code",[s._v("logProperty")]),s._v(" 函数，来跟踪用户对属性的操作，当代码成功运行后，在控制台会输出以下结果：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Set: name => semlinker\nSet: name => kakuqo\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"_13-5-方法装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-5-方法装饰器"}},[s._v("#")]),s._v(" 13.5 方法装饰器")]),s._v(" "),a("p",[s._v("方法装饰器声明：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("declare type MethodDecorator = <T>(target:Object, propertyKey: string | symbol, \t \t\n  descriptor: TypePropertyDescript<T>) => TypedPropertyDescriptor<T> | void;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("方法装饰器顾名思义，用来装饰类的方法。它接收三个参数：")]),s._v(" "),a("ul",[a("li",[s._v("target: Object - 被装饰的类")]),s._v(" "),a("li",[s._v("propertyKey: string | symbol - 方法名")]),s._v(" "),a("li",[s._v("descriptor: TypePropertyDescript - 属性描述符")])]),s._v(" "),a("p",[s._v("废话不多说，直接上例子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function LogOutput(tarage: Function, key: string, descriptor: any) {\n  let originalMethod = descriptor.value;\n  let newMethod = function(...args: any[]): any {\n    let result: any = originalMethod.apply(this, args);\n    if(!this.loggedOutput) {\n      this.loggedOutput = new Array<any>();\n    }\n    this.loggedOutput.push({\n      method: key,\n      parameters: args,\n      output: result,\n      timestamp: new Date()\n    });\n    return result;\n  };\n  descriptor.value = newMethod;\n}\n\nclass Calculator {\n  @LogOutput\n  double (num: number): number {\n    return num * 2;\n  }\n}\n\nlet calc = new Calculator();\ncalc.double(11);\n// console ouput: [{method: "double", output: 22, ...}]\nconsole.log(calc.loggedOutput); \n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("p",[s._v("下面我们来介绍一下参数装饰器。")]),s._v(" "),a("h3",{attrs:{id:"_13-6-参数装饰器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-6-参数装饰器"}},[s._v("#")]),s._v(" 13.6 参数装饰器")]),s._v(" "),a("p",[s._v("参数装饰器声明：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("declare type ParameterDecorator = (target: Object, propertyKey: string | symbol, \n  parameterIndex: number ) => void\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("参数装饰器顾名思义，是用来装饰函数参数，它接收三个参数：")]),s._v(" "),a("ul",[a("li",[s._v("target: Object - 被装饰的类")]),s._v(" "),a("li",[s._v("propertyKey: string | symbol - 方法名")]),s._v(" "),a("li",[s._v("parameterIndex: number - 方法中参数的索引值")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Log(target: Function, key: string, parameterIndex: number) {\n  let functionLogged = key || target.prototype.constructor.name;\n  console.log(`The parameter in position ${parameterIndex} at ${functionLogged} has\n\tbeen decorated`);\n}\n\nclass Greeter {\n  greeting: string;\n  constructor(@Log phrase: string) {\n\tthis.greeting = phrase; \n  }\n}\n\n// console output: The parameter in position 0 \n// at Greeter has been decorated\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ClassDecorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("target")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am class decorator'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("MethodDecorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" methodName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" descriptor"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" PropertyDescriptor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am method decorator'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Param1Decorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" methodName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" paramIndex"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am parameter1 decorator'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Param2Decorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" methodName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" paramIndex"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am parameter2 decorator'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("PropertyDecorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" propertyName"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am property decorator'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n@"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ClassDecorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Hello")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  @"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("PropertyDecorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  greeting"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  @"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("MethodDecorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("greet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("@"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Param1Decorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" p1"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" @"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Param2Decorator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" p2"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" am property decorator\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" am parameter2 decorator\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" am parameter1 decorator\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" am method decorator\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("I")]),s._v(" am "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("decorator")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("从上述例子得出如下结论：")]),s._v(" "),a("ul",[a("li",[s._v("有多个参数装饰器时：从最后一个参数依次向前执行")]),s._v(" "),a("li",[s._v("方法和方法参数中参数装饰器先执行。")]),s._v(" "),a("li",[s._v("类装饰器总是最后执行。")]),s._v(" "),a("li",[s._v("方法和属性装饰器，谁在前面谁先执行。因为参数属于方法一部分，所以参数会一直紧紧挨着方法执行。")])]),s._v(" "),a("p",[s._v("介绍完 TypeScript 入门相关的基础知识，猜测很多刚入门的小伙伴已有 "),a("strong",[s._v("“从入门到放弃”")]),s._v(" 的想法，最后我们来简单介绍一下编译上下文。")]),s._v(" "),a("h2",{attrs:{id:"十四、编译上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十四、编译上下文"}},[s._v("#")]),s._v(" 十四、编译上下文")]),s._v(" "),a("h3",{attrs:{id:"_14-1-tsconfig-json-的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-1-tsconfig-json-的作用"}},[s._v("#")]),s._v(" 14.1 tsconfig.json 的作用")]),s._v(" "),a("ul",[a("li",[s._v("用于标识 TypeScript 项目的根路径；")]),s._v(" "),a("li",[s._v("用于配置 TypeScript 编译器；")]),s._v(" "),a("li",[s._v("用于指定编译的文件。")])]),s._v(" "),a("h3",{attrs:{id:"_14-2-tsconfig-json-重要字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-2-tsconfig-json-重要字段"}},[s._v("#")]),s._v(" 14.2 tsconfig.json 重要字段")]),s._v(" "),a("ul",[a("li",[s._v("files - 设置要编译的文件的名称；")]),s._v(" "),a("li",[s._v("include - 设置需要进行编译的文件，支持路径模式匹配；")]),s._v(" "),a("li",[s._v("exclude - 设置无需进行编译的文件，支持路径模式匹配；")]),s._v(" "),a("li",[s._v("compilerOptions - 设置与编译流程相关的选项。")])]),s._v(" "),a("h3",{attrs:{id:"_14-3-compileroptions-选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-3-compileroptions-选项"}},[s._v("#")]),s._v(" 14.3 compilerOptions 选项")]),s._v(" "),a("p",[s._v("compilerOptions 支持很多选项，常见的有 "),a("code",[s._v("baseUrl")]),s._v("、 "),a("code",[s._v("target")]),s._v("、"),a("code",[s._v("baseUrl")]),s._v("、 "),a("code",[s._v("moduleResolution")]),s._v(" 和 "),a("code",[s._v("lib")]),s._v(" 等。")]),s._v(" "),a("p",[s._v("compilerOptions 每个选项的详细说明如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{\n  "compilerOptions": {\n\n    /* 基本选项 */\n    "target": "es5",                       // 指定 ECMAScript 目标版本: \'ES3\' (default), \'ES5\', \'ES6\'/\'ES2015\', \'ES2016\', \'ES2017\', or \'ESNEXT\'\n    "module": "commonjs",                  // 指定使用模块: \'commonjs\', \'amd\', \'system\', \'umd\' or \'es2015\'\n    "lib": [],                             // 指定要包含在编译中的库文件\n    "allowJs": true,                       // 允许编译 javascript 文件\n    "checkJs": true,                       // 报告 javascript 文件中的错误\n    "jsx": "preserve",                     // 指定 jsx 代码的生成: \'preserve\', \'react-native\', or \'react\'\n    "declaration": true,                   // 生成相应的 \'.d.ts\' 文件\n    "sourceMap": true,                     // 生成相应的 \'.map\' 文件\n    "outFile": "./",                       // 将输出文件合并为一个文件\n    "outDir": "./",                        // 指定输出目录\n    "rootDir": "./",                       // 用来控制输出目录结构 --outDir.\n    "removeComments": true,                // 删除编译后的所有的注释\n    "noEmit": true,                        // 不生成输出文件\n    "importHelpers": true,                 // 从 tslib 导入辅助工具函数\n    "isolatedModules": true,               // 将每个文件做为单独的模块 （与 \'ts.transpileModule\' 类似）.\n\n    /* 严格的类型检查选项 */\n    "strict": true,                        // 启用所有严格类型检查选项\n    "noImplicitAny": true,                 // 在表达式和声明上有隐含的 any类型时报错\n    "strictNullChecks": true,              // 启用严格的 null 检查\n    "noImplicitThis": true,                // 当 this 表达式值为 any 类型的时候，生成一个错误\n    "alwaysStrict": true,                  // 以严格模式检查每个模块，并在每个文件里加入 \'use strict\'\n\n    /* 额外的检查 */\n    "noUnusedLocals": true,                // 有未使用的变量时，抛出错误\n    "noUnusedParameters": true,            // 有未使用的参数时，抛出错误\n    "noImplicitReturns": true,             // 并不是所有函数里的代码都有返回值时，抛出错误\n    "noFallthroughCasesInSwitch": true,    // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）\n\n    /* 模块解析选项 */\n    "moduleResolution": "node",            // 选择模块解析策略： \'node\' (Node.js) or \'classic\' (TypeScript pre-1.6)\n    "baseUrl": "./",                       // 用于解析非相对模块名称的基目录\n    "paths": {},                           // 模块名到基于 baseUrl 的路径映射的列表\n    "rootDirs": [],                        // 根文件夹列表，其组合内容表示项目运行时的结构内容\n    "typeRoots": [],                       // 包含类型声明的文件列表\n    "types": [],                           // 需要包含的类型声明文件名列表\n    "allowSyntheticDefaultImports": true,  // 允许从没有设置默认导出的模块中默认导入。\n\n    /* Source Map Options */\n    "sourceRoot": "./",                    // 指定调试器应该找到 TypeScript 文件而不是源文件的位置\n    "mapRoot": "./",                       // 指定调试器应该找到映射文件而不是生成文件的位置\n    "inlineSourceMap": true,               // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件\n    "inlineSources": true,                 // 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性\n\n    /* 其他选项 */\n    "experimentalDecorators": true,        // 启用装饰器\n    "emitDecoratorMetadata": true          // 为装饰器提供元数据的支持\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br")])]),a("h1",{attrs:{id:"十五、有什么优势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十五、有什么优势"}},[s._v("#")]),s._v(" 十五、有什么优势")]),s._v(" "),a("p",[s._v("类型断言：")]),s._v(" "),a("ul",[a("li",[s._v("静态输入：静态类型化是一种功能，可以在开发人员编写脚本时检测错误。")]),s._v(" "),a("li",[s._v("大型的开发项目：使用TypeScript工具来进行重构更变的容易、快捷。")]),s._v(" "),a("li",[s._v("更好的协作：类型安全是在编码期间检测错误，而不是在编译项目时检测错误。\n类型转换 尖括号 和 as")])]),s._v(" "),a("p",[s._v("interface 和 type的区别")]),s._v(" "),a("ul",[a("li",[s._v("interface 只能定义对象类型。type声明可以声明任何类型。")]),s._v(" "),a("li",[s._v("interface 能够声明合并，两个相同接口会合并。Type声明合并会报错")]),s._v(" "),a("li",[s._v("type可以类型推导")])]),s._v(" "),a("p",[s._v("看到这里的读者都是“真爱”，如果你还意犹未尽，那就来看看本人整理的 Github 上 1.5K+ 的开源项目："),a("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fsemlinker%2Fawesome-typescript",title:"https://github.com/semlinker/awesome-typescript",target:"_blank",rel:"noopener noreferrer"}},[s._v("awesome-typescript"),a("OutboundLink")],1),s._v("。")])])}),[],!1,null,null,null);n.default=t.exports}}]);