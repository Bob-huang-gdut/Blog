(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{407:function(s,n,a){"use strict";a.r(n);var e=a(28),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/19/16f1c1071871be44?w=1400&h=466&f=png&s=240149",alt:""}})]),s._v(" "),a("ul",[a("li",[s._v("使用PureComponent")]),s._v(" "),a("li",[s._v("使用React.memo(myComponent, areEqual)")]),s._v(" "),a("li",[s._v("使用shouldComponentUpdate生命周期事件")]),s._v(" "),a("li",[s._v("使用 React Fragments 避免额外标记")]),s._v(" "),a("li",[s._v("避免使用内联函数定义")]),s._v(" "),a("li",[s._v("使用唯一键迭代")]),s._v(" "),a("li",[s._v("为组件创建错误边界")]),s._v(" "),a("li",[s._v("响应式数据的精细化渲染")]),s._v(" "),a("li",[s._v("减少渲染的节点/降低渲染计算量(复杂度)")])]),s._v(" "),a("h2",{attrs:{id:"_1-使用purecomponent"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用purecomponent"}},[s._v("#")]),s._v(" 1.使用PureComponent")]),s._v(" "),a("p",[s._v("它与普通组件是一样的，只是对负责 shouldComponentUpdate——它对状态和 props 数据进行"),a("strong",[s._v("浅层比较")]),s._v("。如果先前的状态和 props 数据与下一个 props 或状态相同，则组件不会重新渲染。")]),s._v(" "),a("p",[a("strong",[s._v("什么是浅层比较？")])]),s._v(" "),a("p",[s._v("在对比先前的 props 和状态与下一个 props和状态时，浅层比较将检查它们的属性是否有相同的值，如简单数据类型的值是否相等或者是复杂数据类型的引用地址是否相等。通过这种方式能跳过组件渲染，提高组件性能。")]),s._v(" "),a("h2",{attrs:{id:"_2-使用react-memo-mycomponent-areequal"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用react-memo-mycomponent-areequal"}},[s._v("#")]),s._v(" 2. 使用React.memo(myComponent, areEqual)")]),s._v(" "),a("p",[s._v("React.memo是用来创建函数式高阶组件的API，与PureComponent功能类似，默认是对输入的props进行浅层比较，如果相同则跳过组件渲染，提高组件性能。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class RegularChildComponent extends React.Component {\n  render() {\n    console.log("Regular Component Rendered..");\n    return <div>{this.props.name}</div>;\n  }\n}\n\nclass PureChildComponent extends React.PureComponent {\n  // Pure Components are the components that do not re-render if the State data or props data is still the same\n  render() {\n    console.log("Pure Component Rendered..")\n    return <div>{this.props.name}</div>;\n  }\n}\n\nfunction CustomisedComponent(props) {\n  console.log("Memo Component Rendered..")\n  return (\n    <div>\n      <b>User name: {props.name}</b>\n    </div>\n  )\n}\n \n// The component below is the optimised version for the Default Componenent\n// The Component will not re-render if same props value for "name" property \nconst MemoComponent = React.memo(CustomisedComponent);\n\nclass ApplicationComponent extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      name: "Mayank"\n    }\n  }\n\n  updateState = () => {\n    setInterval(() => {\n      this.setState({\n        name: "Mayank"\n      })\n    }, 1000)\n  }\n\n  componentDidMount() {\n    this.updateState();\n  }\n\n  render() {\n    console.log("Render Called Again")\n    return (\n      <div>\n        <CustomisedComponent name={this.state.name} />\n        <PureChildComponent name={this.state.name} />\n        <MemoComponent name={this.state.name} />\n      </div>\n    )\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br")])]),a("p",[a("strong",[s._v("注意：")])]),s._v(" "),a("p",[s._v("与 class 组件中 shouldComponentUpdate() 方法不同的是，如果 props 相等，areEqual 会返回 true；如果 props 不相等，则返回 false。这与 shouldComponentUpdate 方法的返回值相反。")]),s._v(" "),a("h2",{attrs:{id:"_3-使用shouldcomponentupdate生命周期事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用shouldcomponentupdate生命周期事件"}},[s._v("#")]),s._v(" 3.使用shouldComponentUpdate生命周期事件")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("shouldComponentUpdate(nextProps, nextState) {\n  if(nextState.age != this.state.age || netState.name === this.state.name) {\n    return true;\n  }\n  return false;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("这个生命周期钩子将nextState和nextProps 作为输入，并可将其与当前props 和state做对比，以决定是否需要重新渲染，一般是针对某些特定的业务场景进行的优化。")]),s._v(" "),a("h2",{attrs:{id:"_4-使用-react-fragments-避免额外标记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用-react-fragments-避免额外标记"}},[s._v("#")]),s._v(" 4.使用 React Fragments 避免额外标记")]),s._v(" "),a("p",[s._v("用户创建新组件时，每个组件应具有单个父标签。父级不能有两个标签，所以顶部要有一个公共标签。所以我们经常在组件顶部添加额外标签，例如")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  render() {\n    return(<div>\n      <h1>ComponentA</h1>\n      <p>aaaaaa</p>\n    </div>)\n  }\n} \nexport default ComponentA\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("除了充当组件的父标签之外，这个额外的 div 没有其他用途。\n更好的方式是通过fragement代替div，因为fragement没有标记上面的代码没有额外的标记，因此节省了渲染器渲染额外元素的工作量。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("  render() {\n    return(<>\n      <h1>ComponentA</h1>\n      <p>aaaaaa</p>\n    </>)\n  }\n} \nexport default ComponentA\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"_5-避免使用内联函数定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-避免使用内联函数定义"}},[s._v("#")]),s._v(" 5. 避免使用内联函数定义")]),s._v(" "),a("p",[s._v("使用内联函数时，则每次调用render函数时都会创建一个新的函数实例，这会导致 组件始终被"),a("strong",[s._v("重新渲染")]),s._v("。")]),s._v(" "),a("p",[s._v("但有时候我们会被逼的不得不使用箭头函数来作为事件处理器，如下图场景。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("handleClick = () => {\n  // 处理点击业务\n};\nrender() {\n  return (<>{\n    listData.map(item => {\n      return (<ListItem key={item.id} onClick={event => this.handleClick(event, item)}/>)\n    })  \n  }</>)\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("这里有更好的实现方式。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("handleClick = () => {\n  // 处理点击业务\n};\nrender() {\n  return (<>{\n    listData.map(item => {\n      return (<ListItem key={item.id} id={item.id} onClick={this.handleClick}/>)\n    })  \n  }</>)\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("当第三方组件或者 DOM 组件呢? 可以用传递data-*属性。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("handleClick = () => {\n  // 处理点击业务\n};\nrender() {\n  return (<>{\n    listData.map(item => {\n      return (<ListItem data-key={item.id} data-id={item.id} onClick={this.handleClick}/>)\n    })  \n  }</>)\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("这里顺带提一下关于绑定函数上下文的实践方式分析，目前以下几种方式可以实现：")]),s._v(" "),a("ul",[a("li",[s._v("1.在Constructor中进行绑定。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("constructor() {\n  this.handleClick = this.handleClick.bind(this)\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("2.内联函数中进行绑定。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("handleClick() {\n  // 处理点击业务\n}\nrender() {\n  return (<>{\n    listData.map(item => {\n      return (<ListItem data-key={item.id} data-id={item.id} onClick={this.handleClick.bind(this)}/>)\n    })  \n  }</>)\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("ul",[a("li",[s._v("3.使用箭头函数。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("handleClick = () => {\n  // 处理点击业务\n}\nrender() {\n  return (<>{\n    listData.map(item => {\n      return (<ListItem data-key={item.id} data-id={item.id} onClick={this.handleClick}/>)\n    })  \n  }</>)\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("对比1和2，第2种方式在每次render时，都执行一次绑定函数上下文的操作，而1只在构造函数中绑定一次，后面不会再绑定。")]),s._v(" "),a("p",[s._v("对比1和3，第三种方式避免了绑定上下文的写法，运用箭头函数的方式隐式地绑定了"),a("strong",[s._v("当前环境")]),s._v("的上下文，当然这种方式也有缺点，每个组件都会有test1函数的一份实例，影响了可复用性。此外因为它是对象属性但不是原型属性，所以test1函数在继承链中不可用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class ComponentA extends React.Component {\n  constructor() {\n    super()\n    this.test2 = this.test2.bind(this)\n    console.log(this)\n  }\n  test2() {\n    console.log('test1')\n  }\n  test1 = () => {\n    console.log('test1')\n  }\n  render() {\n    return(<div>\n      <h1>ComponentA</h1>\n      <p>aaaaaa</p>\n    </div>)\n  }\n} \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/19/16f1cd9e24eed939?w=2880&h=1800&f=png&s=1370802",alt:""}})]),s._v(" "),a("p",[s._v("综上所述：如果组件复用性不高，可以考虑箭头函数的形式，如果是高复用率的话，更推荐在Constructor中进行绑定。")]),s._v(" "),a("h2",{attrs:{id:"_6-使用唯一键迭代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-使用唯一键迭代"}},[s._v("#")]),s._v(" 6.使用唯一键迭代")]),s._v(" "),a("p",[s._v("我们可以在以下场景中使用 index 作为键：")]),s._v(" "),a("ul",[a("li",[s._v("列表项是静态的，项目不随时间变化。")]),s._v(" "),a("li",[s._v("items 没有唯一 id。")]),s._v(" "),a("li",[s._v("list 永远不会重新排序或过滤。")]),s._v(" "),a("li",[s._v("不会从顶部或中间添加或删除项目。")])]),s._v(" "),a("p",[s._v("非上面的情况则可以考虑某种哈希函数生成id。")]),s._v(" "),a("h2",{attrs:{id:"_7-为组件创建错误边界"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-为组件创建错误边界"}},[s._v("#")]),s._v(" 7.为组件创建错误边界")]),s._v(" "),a("p",[s._v("错误边界涉及一个高阶组件，包含以下方法：static getDerivedStateFromError() 和 componentDidCatch()。")]),s._v(" "),a("p",[s._v("static 函数用于指定回退机制，并从收到的错误中获取组件的新状态。")]),s._v(" "),a("p",[s._v("componentDidCatch 函数用来将错误信息记录到应用中。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class ErrorBoundaries extends React.Component {\n  constructor(props) {\n      super(props);\n        this.state = {\n        hasErrors: false\n      }\n  }\n \n  componentDidCatch(error, info) {\n    console.dir("Component Did Catch Error");\n  }\n \n  static getDerivedStateFromError(error) {\n    console.dir("Get Derived State From Error");\n      return {\n        hasErrors: true\n      }\n  }\n \n  render() {\n    if(this.state.hasErrors === true) {\n        return <div>This is a Error</div>\n    }\n    return <div><ShowData name="Mayank" /></div>\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class ShowData extends React.Component {\n \n  constructor() {\n    super();\n    this.state = {\n      name: "Mayank"\n    }\n  }\n \n  changeData = () => {\n    this.setState({\n      name: "Anshul"\n    })\n  }\n  \n  render() {\n    if(this.state.name === "Anshul") {\n        throw new Error("Sample Error")\n    }\n \n    return (\n      <div>\n        <b>This is the Child Component {this.state.name}</b>\n        <input type="button" onClick={this.changeData} value="Click To Throw Error" />\n      </div>\n    )\n  }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("p",[s._v("当 name 更新为 Anshul 时，上面的代码会抛出错误。")]),s._v(" "),a("p",[s._v("组件 ShowData 是 ErrorBoundaries 组件内的嵌入。")]),s._v(" "),a("p",[s._v("因此，如果错误是从 ShowData 函数内抛出的，则它会被父组件捕获，我们使用 static getDerivedStateFromError 函数和 componentDidCatch 生命周期事件中的日志数据部署回退 UI。")]),s._v(" "),a("h2",{attrs:{id:"_8-响应式数据的精细化渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-响应式数据的精细化渲染"}},[s._v("#")]),s._v(" 8.响应式数据的精细化渲染")]),s._v(" "),a("p",[s._v("大部分情况下，响应式数据可以实现视图精细化的渲染，但它还是不能避免写出低效的程序. 本质上还是因为组件违背'单一职责'.")]),s._v(" "),a("p",[s._v("举个例子，现在有一个 MyComponent 组件，依赖于 A、B、C 三个数据源，来构建一个 vdom 树。现在的问题是什么呢？现在只要 A、B、C 任意一个变动，那么 MyComponent 整个就会重新渲染:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/19/16f1d311241b1808?w=678&h=736&f=png&s=142788",alt:""}})]),s._v(" "),a("p",[s._v("更好的做法是让组件的职责更单一，精细化地依赖响应式数据，或者说对响应式数据进行‘隔离’. 如下图, A、B、C 都抽取各自的组件中了，现在 A 变动只会渲染 A 组件本身，而不会影响父组件和 B、C 组件:")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/19/16f1d31d5cf2710f?w=912&h=660&f=png&s=121144",alt:""}})]),s._v(" "),a("h2",{attrs:{id:"_9-减少渲染的节点-降低渲染计算量-复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-减少渲染的节点-降低渲染计算量-复杂度"}},[s._v("#")]),s._v(" 9.减少渲染的节点/降低渲染计算量(复杂度)")]),s._v(" "),a("ul",[a("li",[s._v("不要在渲染函数都进行不必要的计算")])]),s._v(" "),a("p",[s._v("比如不要在渲染函数(render)中进行数组排序、数据转换等等。")]),s._v(" "),a("ul",[a("li",[s._v("不可变数据\n不可变数据可以让状态变得可预测，也让 shouldComponentUpdate '浅比较'变得更可靠和高效.")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/19/16f1d73bedd9a35e?w=715&h=324&f=png&s=33852",alt:""}})]),s._v(" "),a("p",[s._v("相关的工具有Immutable.js、Immer、immutability-helper 以及 seamless-immutable。")]),s._v(" "),a("ul",[a("li",[s._v("虚拟列表")])]),s._v(" "),a("p",[s._v("虚拟列表是常见的‘长列表'和'复杂组件树'优化方式，它优化的本质就是减少渲染的节点。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/19/16f1d4e179554dc6?w=724&h=660&f=png&s=77032",alt:""}})]),s._v(" "),a("p",[s._v("虚拟列表常用于以下组件场景:")]),s._v(" "),a("p",[s._v("无限滚动列表，表格，下拉列表")]),s._v(" "),a("p",[s._v("推荐组件方案 "),a("strong",[s._v("react-virtualized")]),s._v("，antd中的List组件也是基于该组件做的"),a("strong",[s._v("滚动加载无限长列表")]),s._v("功能")]),s._v(" "),a("ul",[a("li",[s._v("懒加载组件")])]),s._v(" "),a("p",[s._v("我们可以按需懒惰加载这些拆分组件，增强应用的整体性能。假设有两个组件 ComponentA 或 ComponentB，根据标识判断渲染其中一个。我们可以根据具体的条件延迟组件加载，无需一开始就加载两个组件。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const LazyComponentA = lazy(() => slowImport(import("./components/ComponentA")));\nconst LazyComponentB = lazy(() => slowImport(import("./components/ComponentB")));\nimport ComponentA from \'./components/ComponentA\'\nimport ComponentB from \'./components/ComponentB\'\n\n// 模拟延时加载\nfunction slowImport(value, ms = 1000){\n  return new Promise(resolve=>{\n    setTimeout(() => resolve(value), ms);\n  })\n}\n\nexport default () => {\n  const [isShowA, setIsShowA] = useState(true)\n  setTimeout(() => {\n    setIsShowA(false)\n  }, 10000)\n  return (\n    <PageHeaderWrapper content="React 性能优化">\n      {\n        isShowA ? (<>\n          <Suspense fallback={<h1>Loading...</h1>}>\n            <LazyComponentA />\n          </Suspense>\n        </>) : (<>\n          <Suspense fallback={<h1>Loading...</h1>}>\n            <LazyComponentB />\n          </Suspense>\n        </>)\n      }\n      {\n        isShowA ?  <ComponentA /> : <ComponentB />\n      }\n    </PageHeaderWrapper>\n  );\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("p",[s._v("这样做的可以减少主包体积，消耗的网络传输时间更少，而且动态单独加载的包比较小，可以迅速加载完成。我们可以分析应用来决定懒加载哪些组件，从而减少应用的初始加载时间。实际项目中使用场景可以使是tab，树形选择器，模态弹窗，下拉列表，折叠组件等等")])])}),[],!1,null,null,null);n.default=t.exports}}]);