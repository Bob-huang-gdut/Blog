(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{425:function(a,t,r){"use strict";r.r(t);var e=r(28),s=Object(e.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"taro3跨端跨框架原理初探"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#taro3跨端跨框架原理初探"}},[a._v("#")]),a._v(" Taro3跨端跨框架原理初探")]),a._v(" "),r("h2",{attrs:{id:"taro3之前-重编译时-轻运行时"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#taro3之前-重编译时-轻运行时"}},[a._v("#")]),a._v(" Taro3之前（重编译时，轻运行时）：")]),a._v(" "),r("p",[a._v("过去的整体架构，它分为两个部分，第⼀部分是编译时，第⼆部分是运⾏时。编译时会先对⽤户的 React 代码进⾏编译，转换成各个端上的⼩程序都可以运⾏的代码，然后再在各个⼩程序端上⾯都配上⼀个对应的运⾏时框架进⾏适配，最终让这份代码运⾏在各个⼩程序端上⾯。\n"),r("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7a7325c8843c47c688395192749a1e31~tplv-k3u1fbpfcp-watermark.awebp",alt:""}}),a._v("\n编译时是使用 "),r("strong",[a._v("babel-parser")]),a._v(" 将 Taro 代码解析成抽象语法树，然后通过 "),r("strong",[a._v("babel-types")]),a._v(" 对抽象语法树进行一系列修改、转换操作，最后再通过 "),r("strong",[a._v("babel-generate")]),a._v(" 生成对应的目标代码。")]),a._v(" "),r("p",[a._v("这样的实现过程有三⼤缺点：")]),a._v(" "),r("ul",[r("li",[a._v("JSX ⽀持程度不完美。Taro 对 JSX 的⽀持是通过编译时的适配去实现的，但 JSX ⼜⾮常之灵活，因此还不能做到 100% ⽀持所有的 JSX 语法。 JSX 是一个 JavaScript 的语法扩展，它的写法千变万化，十分灵活。之前Taro团队是采用穷举的方式对 JSX 可能的写法进行了一一适配，这一部分工作量很大。")]),a._v(" "),r("li",[a._v("不⽀持 source-map。Taro 对源代码进⾏了⼀系列的转换操作之后，就不⽀持 source-map 了，⽤户 调试、使⽤这个项⽬就会不⽅便。")]),a._v(" "),r("li",[a._v("维护和迭代⼗分困难。Taro 编译时代码⾮常的复杂且离散，维护迭代都⾮常的困难。")])]),a._v(" "),r("p",[a._v("再看⼀下运⾏时的缺陷。对于每个⼩程序平台，都会提供对应的⼀份运⾏时框架进⾏适配。当修改⼀些 Bug 或者新增⼀些特性的时候，需要同时去修改多份运⾏时框架。")]),a._v(" "),r("p",[a._v("总的来说，之前的Taro3.0之前有以下问题：\n"),r("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db3b41a2a35b430ca49fc84d99f7fdad~tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),a._v(" "),r("h2",{attrs:{id:"taro3之后-重运行时"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#taro3之后-重运行时"}},[a._v("#")]),a._v(" Taro3之后（重运行时）：")]),a._v(" "),r("p",[a._v("Taro 3 则可以大致理解为解释型架构（相对于 Taro 1/2 而言），主要通过"),r("strong",[a._v("在小程序端模拟实现 DOM、BOM API来让前端框架直接运行在小程序环境中")]),a._v("，从而达到小程序和 H5 统一的目的，而对于生命周期、组件库、API、路由等差异，依然可以通过定义统一标准，各端负责各自实现的方式来进行抹平。而正因为 Taro 3 的原理，在 Taro 3 中同时支持 React、Vue 等框架，甚至还支持了 jQuery，还能支持让开发者自定义地去拓展其他框架的支持，比如 Angular，Taro 3 整体架构如下：\n"),r("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/462297be6ab44b05ab459677e99ee20c~tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),a._v(" "),r("p",[a._v("Taro 3 之后 "),r("strong",[a._v("⼩程序端的整体架构。⾸先是⽤户的 React 或 Vue 的代码会通过 CLI 进⾏ Webpack 打包，其次在运⾏时会提供 React 和 Vue 对应的适配器进⾏适配，然后调⽤Taro提供的 DOM 和 BOM API， 最后把整个程序渲染到所有的⼩程序端上⾯")]),a._v(" "),r("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d66c221da2124f4987e36473abf45700~tplv-k3u1fbpfcp-watermark.awebp",alt:""}}),a._v("\nReact 有点特殊，因为 React-DOM 包含大量浏览器兼容类的代码，导致包太大，而这部分代码是不需要的，因此做了一些定制和优化。")]),a._v(" "),r("p",[a._v("在 React 16+ ，React 的架构如下：")]),a._v(" "),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),r("p",[a._v("Taro 3重构是为了解决架构问题，还有提供多框架的⽀持。从之前的重编译时，到现在的重运行时。")]),a._v(" "),r("p",[a._v("同等条件下，编译时做的工作越多，也就意味着运行时做的工作越少，性能会更好。从长远来看，计算机硬件的性能越来越冗余，如果在牺牲一点可以容忍的性能的情况下换来整个框架更大的灵活性和更好的适配性，并且能够极大的提升开发体验。")])])}),[],!1,null,null,null);t.default=s.exports}}]);