(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{430:function(v,_,l){"use strict";l.r(_);var e=l(28),t=Object(e.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h1",{attrs:{id:"个人总结"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#个人总结"}},[v._v("#")]),v._v(" 个人总结")]),v._v(" "),l("p",[v._v("qiankun 架构模型 & 一种方法论 & 不局限于技术栈")]),v._v(" "),l("p",[v._v("为什么都在做微前端框架？")]),v._v(" "),l("ul",[l("li",[v._v("因为npm包共享业务，有几个缺点，发布效率低，多团队协作效率低")])]),v._v(" "),l("p",[v._v("什么是微前端？")]),v._v(" "),l("ul",[l("li",[v._v("借鉴微服务，可将业务拆分成多个前端应用，聚合在一个整体应用的架构模型")])]),v._v(" "),l("p",[v._v("什么项目适合微前端架构？")]),v._v(" "),l("ul",[l("li",[v._v("拆分巨型应用，使得应用变得更可维护")]),v._v(" "),l("li",[v._v("兼容历史应用，实现增量开发")])]),v._v(" "),l("p",[v._v("微前端解决什么问题？")]),v._v(" "),l("ul",[l("li",[v._v("独立部署")]),v._v(" "),l("li",[v._v("增量迁移")]),v._v(" "),l("li",[v._v("团队自治")]),v._v(" "),l("li",[v._v("松耦合代码")])]),v._v(" "),l("p",[v._v("微前端架构方案：")]),v._v(" "),l("ul",[l("li",[v._v("自由组织架构 system.js")]),v._v(" "),l("li",[v._v("基座模式 single-spa qiankun")]),v._v(" "),l("li",[v._v("去中心化 模块联邦")])]),v._v(" "),l("p",[v._v("system.js：")]),v._v(" "),l("ul",[l("li",[v._v("libraryTarget: 'system'")]),v._v(" "),l("li",[v._v("external 中 排除依赖包，避免冲突")]),v._v(" "),l("li",[v._v("index.html 类似于基座，加载 external 中排除的依赖包")]),v._v(" "),l("li",[v._v("使用System.import('/index.js') 引入具体应用")])]),v._v(" "),l("p",[v._v("single-spa：\n模块联邦（Module Federation）：")]),v._v(" "),l("p",[v._v("react.suspense")])])}),[],!1,null,null,null);_.default=t.exports}}]);