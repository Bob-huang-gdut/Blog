(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{402:function(t,e,a){"use strict";a.r(e);var s=a(46),v=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"vue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[t._v("#")]),t._v(" vue")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("价值不大的知识点不做记录\n🎉 💯 🎍 💝 🔥\nhttps://www.webpagefx.com/tools/emoji-cheat-sheet/\nhttps://www.webpagefx.com/tools/emoji-cheat-sheet/")])]),t._v(" "),a("h2",{attrs:{id:"一、vue-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、vue-基础"}},[t._v("#")]),t._v(" 一、vue 基础")]),t._v(" "),a("h3",{attrs:{id:"_1-vue的基本原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue的基本原理"}},[t._v("#")]),t._v(" 1. Vue的基本原理")]),t._v(" "),a("p",[t._v("当一个Vue实例创建时，Vue会遍历data中的属性，用Object.defineProperty（vue3.0使用proxy）将它们转为 getter/setter，并且在内部追踪相关依赖，在属性被访问和修改时通知变化。每个组件实例都有相应的 watcher 程序实例，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的setter被调用时，会通知watcher重新计算，从而致使它关联的组件得以更新。\n"),a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1b16025a35b4cd2b343a92e740621b7~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_2-双向数据绑定的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-双向数据绑定的原理"}},[t._v("#")]),t._v(" 2. 双向数据绑定的原理")]),t._v(" "),a("p",[t._v("Vue.js 是采用数据劫持结合发布者-订阅者模式的方式，"),a("strong",[t._v("通过Object.defineProperty()来劫持各个属性的setter，getter")]),t._v("，在数据变动时发布消息给订阅者，触发相应的监听回调。主要分为以下几个步骤：")]),t._v(" "),a("ul",[a("li",[t._v("需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化")]),t._v(" "),a("li",[t._v("compile解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图")]),t._v(" "),a("li",[t._v("Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是: ①在自身实例化时往属性订阅器(dep)里面添加自己 ②自身必须有一个update()方法 ③待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。")]),t._v(" "),a("li",[t._v("MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a286bdc076ae425fb9591bb8c4153240~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"_3-使用-object-defineproperty-来进行数据劫持有什么缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用-object-defineproperty-来进行数据劫持有什么缺点"}},[t._v("#")]),t._v(" 3.使用 Object.defineProperty() 来进行数据劫持有什么缺点？")]),t._v(" "),a("p",[t._v("在对一些属性进行操作时，使用这种方法"),a("strong",[t._v("无法拦截")]),t._v("，\n"),a("strong",[t._v("比如通过下标方式修改数组数据")]),t._v("或者"),a("strong",[t._v("给对象新增属性")]),t._v("，这都不能触发组件的重新渲染，因为 Object.defineProperty 不能拦截到这些操作。更精确的来说，对于数组而言，大部分操作都是拦截不到的，只是 Vue 内部通过重写函数的方式解决了这个问题。")]),t._v(" "),a("p",[t._v("在 Vue3.0 中已经不使用这种方式了，而是通过使用 Proxy 对对象进行代理，从而实现数据劫持。使用Proxy 的好处是它可以完美的监听到任何方式的数据改变，唯一的缺点是兼容性的问题，因为 Proxy 是 ES6 的语法。")]),t._v(" "),a("p",[t._v("在 Vue3.0 中已经不使用这种方式了，而是通过使用 Proxy 对对象进行代理，从而实现数据劫持。使用Proxy 的好处是它可以完美的监听到任何方式的数据改变，唯一的缺点是兼容性的问题，因为 Proxy 是 ES6 的语法。")]),t._v(" "),a("h3",{attrs:{id:"_4-mvvm、mvc、mvp的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-mvvm、mvc、mvp的区别"}},[t._v("#")]),t._v(" 4. MVVM、MVC、MVP的区别")]),t._v(" "),a("p",[t._v("MVC、MVP 和 MVVM 是三种常见的软件架构设计模式，主要通过分离关注点的方式来组织代码结构，优化开发效率。")]),t._v(" "),a("p",[t._v("在开发单页面应用时，往往一个路由页面对应了一个脚本文件，所有的页面逻辑都在一个脚本文件里。页面的渲染、数据的获取，对用户事件的响应所有的应用逻辑都混合在一起，这样在开发简单项目时，可能看不出什么问题，如果项目变得复杂，那么整个文件就会变得冗长、混乱，这样对项目开发和后期的项目维护是非常不利的。")]),t._v(" "),a("p",[t._v("（1）MVC")]),t._v(" "),a("p",[t._v("MVC 通过分离 Model、View 和 Controller 的方式来组织代码结构。其中 View 负责页面的显示逻辑，Model 负责存储页面的业务数据，以及对相应数据的操作。并且 View 和 Model 应用了观察者模式，当 Model 层发生改变的时候它会通知有关 View 层更新页面。Controller 层是 View 层和 Model 层的纽带，它主要负责用户与应用的响应操作，当用户与页面产生交互的时候，Controller 中的事件触发器就开始工作了，通过调用 Model 层，来完成对 Model 的修改，然后 Model 层再去通知 View 层更新。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a65e1b9145894647a25788caf12ddd26~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),t._v(" "),a("p",[t._v("（2）MVVM")]),t._v(" "),a("p",[t._v("MVVM 分为 Model、View、ViewModel：")]),t._v(" "),a("p",[t._v("Model代表数据模型，数据和业务逻辑都在Model层中定义；")]),t._v(" "),a("p",[t._v("View代表UI视图，负责数据的展示；")]),t._v(" "),a("p",[t._v("ViewModel负责监听Model中数据的改变并且控制视图的更新，处理用户交互操作；")]),t._v(" "),a("p",[t._v("Model和View并无直接关联，而是通过ViewModel来进行联系的，Model和ViewModel之间有着双向数据绑定的联系。因此当Model中的数据改变时会触发View层的刷新，View中由于用户交互操作而改变的数据也会在Model中同步。")]),t._v(" "),a("p",[t._v("这种模式实现了 Model和View的数据自动同步，因此开发者只需要专注于数据的维护操作即可，而不需要自己操作DOM。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d5ce15b7b704483eb91ee1f5d1d64786~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),t._v(" "),a("p",[t._v("（3）MVP")]),t._v(" "),a("p",[t._v("MVP 模式与 MVC 唯一不同的在于 Presenter 和 Controller。在 MVC 模式中使用观察者模式，来实现当 Model 层数据发生变化的时候，通知 View 层的更新。这样 View 层和 Model 层耦合在一起，当项目逻辑变得复杂的时候，可能会造成代码的混乱，并且可能会对代码的复用性造成一些问题。MVP 的模式通过使用 Presenter 来实现对 View 层和 Model 层的解耦。MVC 中的Controller 只知道 Model 的接口，因此它没有办法控制 View 层的更新，MVP 模式中，View 层的接口暴露给了 Presenter 因此可以在 Presenter 中将 Model 的变化和 View 的变化绑定在一起，以此来实现 View 和 Model 的同步更新。这样就实现了对 View 和 Model 的解耦，Presenter 还包含了其他的响应逻辑。")]),t._v(" "),a("h3",{attrs:{id:"_5-computed-和-watch-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-computed-和-watch-的区别"}},[t._v("#")]),t._v(" 5. Computed 和 Watch 的区别")]),t._v(" "),a("p",[t._v("对于Computed：")]),t._v(" "),a("ul",[a("li",[t._v("它支持缓存，只有依赖的数据发生了变化，才会重新计算")]),t._v(" "),a("li",[t._v("不支持异步，当Computed中有异步操作时，无法监听数据的变化")]),t._v(" "),a("li",[t._v("computed的值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data声明过，或者父组件传递过来的props中的数据进行计算的。")]),t._v(" "),a("li",[t._v("如果一个属性是由其他属性计算而来的，这个属性依赖其他的属性，一般会使用computed\n如果computed属性的属性值是函数，那么默认使用get方法，函数的返回值就是属性的属性值；在computed中，属性有一个get方法和一个set方法，当数据发生变化时，会调用set方法。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fullName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nfullName"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("newName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("newName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("对于Watch：")]),t._v(" "),a("ul",[a("li",[t._v("它不支持缓存，数据变化时，它就会触发相应的操作")]),t._v(" "),a("li",[t._v("支持异步监听")]),t._v(" "),a("li",[t._v("监听的函数接收两个参数，第一个参数是最新的值，第二个是变化之前的值")]),t._v(" "),a("li",[t._v("当一个属性发生变化时，就需要执行相应的操作")]),t._v(" "),a("li",[t._v("监听数据必须是data中声明的或者父组件传递过来的props中的数据，当发生变化时，会触发其他操作，函数有两个的参数：")]),t._v(" "),a("li",[t._v("immediate：组件加载立即触发回调函数")]),t._v(" "),a("li",[t._v("deep：深度监听，发现数据内部的变化，在复杂数据类型中使用，例如数组中的对象发生变化。需要注意的是，"),a("strong",[t._v("deep无法监听到数组和对象内部的变化。")])])]),t._v(" "),a("p",[t._v("当想要执行异步或者昂贵的操作以响应不断的变化时，就需要使用watch。")]),t._v(" "),a("p",[t._v("总结：")]),t._v(" "),a("ul",[a("li",[t._v("computed 计算属性 : 依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值。")]),t._v(" "),a("li",[t._v("watch 侦听器 : 更多的是观察的作用，无缓存性，类似于某些数据的监听回调，每当监听的数据变化时都会执行回调进行后续操作。")])]),t._v(" "),a("p",[t._v("运用场景：")]),t._v(" "),a("ul",[a("li",[t._v("当需要进行数值计算,并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时都要重新计算。")]),t._v(" "),a("li",[t._v("当需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许执行异步操作 ( 访问一个 API )，限制执行该操作的频率，并在得到最终结果前，设置中间状态。这些都是计算属性无法做到的。")])]),t._v(" "),a("h3",{attrs:{id:"_6-computed-和-methods-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-computed-和-methods-的区别"}},[t._v("#")]),t._v(" 6. Computed 和 Methods 的区别")]),t._v(" "),a("p",[t._v("可以将同一函数定义为一个 method 或者一个计算属性。对于最终的结果，两种方式是相同的")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("computed: 计算属性是基于它们的依赖进行缓存的，只有在它的相关依赖发生改变时才会重新求值；")])]),t._v(" "),a("li",[a("p",[t._v("method 调用总会执行该函数。")])])]),t._v(" "),a("h3",{attrs:{id:"_7-slot是什么-有什么作用-原理是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-slot是什么-有什么作用-原理是什么"}},[t._v("#")]),t._v(" 7. slot是什么？有什么作用？原理是什么？")]),t._v(" "),a("p",[t._v("slot又名插槽，是Vue的内容分发机制，组件内部的模板引擎使用slot元素用来展示分发内容。插槽slot是子组件的一个模板标签元素，而这一个标签元素是否显示，以及怎么显示是由父组件决定的。slot又分三类，默认插槽，具名插槽和作用域插槽。")]),t._v(" "),a("ul",[a("li",[t._v("默认插槽：又名匿名插槽，当slot没有指定name属性值的时候一个默认显示插槽，一个组件内只有有一个匿名插槽。")]),t._v(" "),a("li",[t._v("具名插槽：带有具体名字的插槽，也就是带有name属性的slot，一个组件可以出现多个具名插槽.")]),t._v(" "),a("li",[t._v("作用域插槽：默认插槽、具名插槽的一个变体，可以是匿名插槽，也可以是具名插槽，该插槽的不同点是在子组件渲染作用域插槽时，可以将子组件内部的数据传递给父组件，让父组件根据子组件的传递过来的数据决定如何渲染该插槽。v-slot（2.6.0提出）合并了slot和slot-scope，v-slot使得作用域变量和提供它的组件之间的更清晰的联系:")])]),t._v(" "),a("p",[t._v("实现原理：当子组件vm实例化时，获取到父组件传入的slot标签的内容，存放在vm.$slot中，默认插槽为vm.$slot.default，具名插槽为vm.$slot.xxx，xxx 为插槽名，当组件执行渲染函数时候，遇到slot标签，使用$slot中的内容进行替换，此时可以为插槽传递数据，若存在数据，则可称该插槽为作用域插槽。")]),t._v(" "),a("h3",{attrs:{id:"_8-过滤器的作用-如何实现一个过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-过滤器的作用-如何实现一个过滤器"}},[t._v("#")]),t._v(" 8. 过滤器的作用，如何实现一个过滤器")]),t._v(" "),a("p",[t._v("根据过滤器的名称，过滤器是用来过滤数据的，在Vue中使用filters来过滤数据，filters不会修改数据，而是过滤数据，改变用户看到的输出（计算属性 computed ，方法 methods 都是通过修改数据来处理数据格式的输出显示）。")]),t._v(" "),a("p",[t._v("使用场景：")]),t._v(" "),a("ul",[a("li",[t._v("需要格式化数据的情况，比如需要处理时间、价格等数据格式的输出 / 显示。")]),t._v(" "),a("li",[t._v("比如后端返回一个 年月日的日期字符串，前端需要展示为 多少天前 的数据格式，此时就可以用fliters过滤器来处理数据。")])]),t._v(" "),a("p",[t._v("例如，在显示金额，给商品价格添加单位：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("li"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("商品价格："),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("price "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" filterPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("li"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nfilters"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filterPrice")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("price")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" price "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'￥'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'--'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"_9-如何保存页面的当前的状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-如何保存页面的当前的状态"}},[t._v("#")]),t._v(" 9. 如何保存页面的当前的状态")]),t._v(" "),a("ul",[a("li",[t._v("要切换的组件作为子组件全屏渲染，父组件中正常储存页面状态。")]),t._v(" "),a("li",[t._v("用keep-alive来缓存页面，当组件在keep-alive内被切换时组件的activated、deactivated这两个生命周期钩子函数会被执行，被包裹在keep-alive中的组件的状态将会被保留.")]),t._v(" "),a("li",[t._v("vuex")])]),t._v(" "),a("h3",{attrs:{id:"_10-常见的事件修饰符及其作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-常见的事件修饰符及其作用"}},[t._v("#")]),t._v(" 10. 常见的事件修饰符及其作用")]),t._v(" "),a("ul",[a("li",[t._v(".stop 等价于 event.stopPropation()")]),t._v(" "),a("li",[t._v(".prevent 等价于 event.preventDefault()")]),t._v(" "),a("li",[t._v(".capture ：与事件冒泡的方向相反，事件捕获由外到内；")]),t._v(" "),a("li",[t._v(".self ：只会触发自己范围内的事件，不包含子元素；")]),t._v(" "),a("li",[t._v(".once ：只会触发一次。")])]),t._v(" "),a("h3",{attrs:{id:"_13-v-if和v-show的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-v-if和v-show的区别"}},[t._v("#")]),t._v(" 13. v-if和v-show的区别")]),t._v(" "),a("ul",[a("li",[t._v("手段：v-if是动态的向DOM树内添加或者删除DOM元素；v-show是通过设置DOM元素的display样式属性控制显隐；")]),t._v(" "),a("li",[t._v("编译条件：v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译; v-show是在任何条件下，无论首次条件是否为真，都被编译，然后被缓存，而且DOM元素保留；")]),t._v(" "),a("li",[t._v("性能消耗：v-if有更高的切换消耗；v-show有更高的初始渲染消耗；")]),t._v(" "),a("li",[t._v("使用场景：v-if适合运营条件不大可能改变；v-show适合频繁切换。")])]),t._v(" "),a("h3",{attrs:{id:"_14-v-model-是如何实现的-语法糖实际是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-v-model-是如何实现的-语法糖实际是什么"}},[t._v("#")]),t._v(" 14. v-model 是如何实现的，语法糖实际是什么？")]),t._v(" "),a("p",[t._v("（1）作用在表单元素上")]),t._v(" "),a("p",[t._v('动态绑定了input的value指向了messgae变量(:value="message")，并且在触发input事件(@input)的时候去动态把message设置为目标值(message=$event.target.value)：')]),t._v(" "),a("p",[t._v("（2）作用在组件上")]),t._v(" "),a("p",[t._v("在自定义组件中，v-model 默认会利用名为 value 的 prop和名为 input 的事件，本质是一个父子组件通信的语法糖，通过prop和$.emit实现。 因此父组件 v-model 语法糖本质上可以修改为：")]),t._v(" "),a("h3",{attrs:{id:"_15-v-model-可以被用在自定义组件上吗-如果可以-如何使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-v-model-可以被用在自定义组件上吗-如果可以-如何使用"}},[t._v("#")]),t._v(" 15. v-model 可以被用在自定义组件上吗？如果可以，如何使用？")]),t._v(" "),a("ul",[a("li",[t._v("使用 :value.sync + $emit('update:value', val);")]),t._v(" "),a("li",[t._v("使用 input + :value + $emit('input', val);")])]),t._v(" "),a("h3",{attrs:{id:"_16-data为什么是一个函数而不是对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-data为什么是一个函数而不是对象"}},[t._v("#")]),t._v(" 16. data为什么是一个函数而不是对象")]),t._v(" "),a("p",[t._v("JavaScript中的对象是引用类型的数据，当多个实例(复用组件)引用同一个对象时，只要一个实例对这个对象进行操作，其他实例中的数据也会发生变化，那就需要每个组件都有自己的数据，这样组件之间才不会相互干扰。所以组件的数据不能写成对象的形式，而是要写成函数的形式。数据以函数返回值的形式定义，这样当每次复用组件的时候，就会返回一个新的data，也就是说每个组件都有自己的私有数据空间，它们各自维护自己的数据，不会干扰其他组件的正常运行。")]),t._v(" "),a("h3",{attrs:{id:"_17-对keep-alive的理解-它是如何实现的-具体缓存的是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-对keep-alive的理解-它是如何实现的-具体缓存的是什么"}},[t._v("#")]),t._v(" 17. 对keep-alive的理解，它是如何实现的，具体缓存的是什么？")]),t._v(" "),a("p",[t._v("如果需要在组件切换的时候，保存一些组件的状态防止多次渲染，就可以使用 keep-alive 组件包裹需要保存的组件。")]),t._v(" "),a("p",[t._v("keep-alive有以下三个属性：")]),t._v(" "),a("ul",[a("li",[t._v("include 字符串或正则表达式，只有名称匹配的组件会被匹配；")]),t._v(" "),a("li",[t._v("exclude 字符串或正则表达式，任何名称匹配的组件都不会被缓存；")]),t._v(" "),a("li",[t._v("max 数字，最多可以缓存多少组件实例。")])]),t._v(" "),a("p",[t._v("注意：keep-alive 包裹动态组件时，会缓存不活动的组件实例。")]),t._v(" "),a("ul",[a("li",[t._v("判断组件 name ，不在 include 或者在 exclude 中，直接返回 vnode，说明该组件不被缓存。")]),t._v(" "),a("li",[t._v("获取组件实例 key ，如果有获取实例的 key，否则重新生成。")]),t._v(" "),a("li",[t._v('key生成规则，cid +"∶∶"+ tag ，仅靠cid是不够的，因为相同的构造函数可以注册为不同的本地组件。')]),t._v(" "),a("li",[t._v("如果缓存对象内存在，则直接从缓存对象中获取组件实例给 vnode ，不存在则添加到缓存对象中。")]),t._v(" "),a("li",[t._v("最大缓存数量，当缓存组件数量超过 max 值时，清除 keys 数组内第一个组件。")])])])}),[],!1,null,null,null);e.default=v.exports}}]);