(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{385:function(s,a,n){"use strict";n.r(a);var e=n(28),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h3",{attrs:{id:"_1-实现日期格式化函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现日期格式化函数"}},[s._v("#")]),s._v(" 1. 实现日期格式化函数")]),s._v(" "),n("p",[s._v("输入：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("dateFormat(new Date('2020-12-01'), 'yyyy/MM/dd') // 2020/12/01\ndateFormat(new Date('2020-04-01'), 'yyyy/MM/dd') // 2020/04/01\ndateFormat(new Date('2020-04-01'), 'yyyy年MM月dd日') // 2020年04月01日\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const dateFormat = (dateInput, format)=>{\n    var day = dateInput.getDate() \n    var month = dateInput.getMonth() + 1  \n    var year = dateInput.getFullYear()   \n    format = format.replace(/yyyy/, year)\n    format = format.replace(/MM/,month)\n    format = format.replace(/dd/,day)\n    return format\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h3",{attrs:{id:"_2-交换a-b的值-不能用临时变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-交换a-b的值-不能用临时变量"}},[s._v("#")]),s._v(" 2. 交换a,b的值，不能用临时变量")]),s._v(" "),n("p",[s._v("巧妙的利用两个数的和、差：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("a = a + b\nb = a - b\na = a - b\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"_3-实现数组的乱序输出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现数组的乱序输出"}},[s._v("#")]),s._v(" 3. 实现数组的乱序输出")]),s._v(" "),n("p",[s._v("主要的实现思路就是：")]),s._v(" "),n("ul",[n("li",[s._v("取出数组的第一个元素，随机产生一个索引值，将该第一个元素和这个索引对应的元素进行交换。")]),s._v(" "),n("li",[s._v("第二次取出数据数组第二个元素，随机产生一个除了索引为1的之外的索引值，并将第二个元素与该索引值对应的元素进行交换")]),s._v(" "),n("li",[s._v("按照上面的规律执行，直到遍历完成")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr = [1,2,3,4,5,6,7,8,9,10];\nfor (var i = 0; i < arr.length; i++) {\n  const randomIndex = Math.round(Math.random() * (arr.length - 1 - i)) + i;\n  [arr[i], arr[randomIndex]] = [arr[randomIndex], arr[i]];\n}\nconsole.log(arr)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("还有一方法就是倒序遍历：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var arr = [1,2,3,4,5,6,7,8,9,10];\nlet length = arr.length,\n    randomIndex,\n    temp;\n  while (length) {\n    randomIndex = Math.floor(Math.random() * length--);\n    temp = arr[length];\n    arr[length] = arr[randomIndex];\n    arr[randomIndex] = temp;\n  }\nconsole.log(arr)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"_4-实现数组元素求和"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-实现数组元素求和"}},[s._v("#")]),s._v(" 4. 实现数组元素求和")]),s._v(" "),n("ul",[n("li",[s._v("arr=[1,2,3,4,5,6,7,8,9,10]，求和")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr=[1,2,3,4,5,6,7,8,9,10]\nlet sum = arr.reduce( (total,i) => total += i,0);\nconsole.log(sum);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("arr=[1,2,3,[[4,5],6],7,8,9]，求和")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var = arr=[1,2,3,[[4,5],6],7,8,9]\nlet arr= arr.toString().split(',').reduce( (total,i) => total += Number(i),0);\nconsole.log(arr);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("递归实现：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1, 2, 3, 4, 5, 6] \n\nfunction add(arr) {\n    if (arr.length == 1) return arr[0] \n    return arr[0] + add(arr.slice(1)) \n}\nconsole.log(add(arr)) // 21\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"_5-实现数组的扁平化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-实现数组的扁平化"}},[s._v("#")]),s._v(" 5. 实现数组的扁平化")]),s._v(" "),n("p",[n("strong",[s._v("（1）递归实现")])]),s._v(" "),n("p",[s._v("普通的递归思路很容易理解，就是通过循环递归的方式，一项一项地去遍历，如果每一项还是一个数组，那么就继续往下遍历，利用递归程序的方法，来实现数组的每一项的连接：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1, [2, [3, 4, 5]]];\nfunction flatten(arr) {\n  let result = [];\n\n  for(let i = 0; i < arr.length; i++) {\n    if(Array.isArray(arr[i])) {\n      result = result.concat(flatten(arr[i]));\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\nflatten(arr);  //  [1, 2, 3, 4，5]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[n("strong",[s._v("（2）reduce 函数迭代")])]),s._v(" "),n("p",[s._v("从上面普通的递归函数中可以看出，其实就是对数组的每一项进行处理，那么其实也可以用reduce 来实现数组的拼接，从而简化第一种方法的代码，改造后的代码如下所示：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n    return arr.reduce(function(prev, next){\n        return prev.concat(Array.isArray(next) ? flatten(next) : next)\n    }, [])\n}\nconsole.log(flatten(arr));//  [1, 2, 3, 4，5]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[n("strong",[s._v("（3）扩展运算符实现")])]),s._v(" "),n("p",[s._v("这个方法的实现，采用了扩展运算符和 some 的方法，两者共同使用，达到数组扁平化的目的：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n    while (arr.some(item => Array.isArray(item))) {\n        arr = [].concat(...arr);\n    }\n    return arr;\n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[n("strong",[s._v("（4）split 和 toString")])]),s._v(" "),n("p",[s._v("可以通过 split 和 toString 两个方法来共同实现数组扁平化，由于数组会默认带一个 toString 的方法，所以可以把数组直接转换成逗号分隔的字符串，然后再用 split 方法把字符串重新转换为数组，如下面的代码所示：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n    return arr.toString().split(',');\n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("通过这两个方法可以将多维数组直接转换成逗号连接的字符串，然后再重新分隔成数组。")]),s._v(" "),n("p",[n("strong",[s._v("（5）ES6 中的 flat")])]),s._v(" "),n("p",[s._v("我们还可以直接调用 ES6 中的 flat 方法来实现数组扁平化。flat 方法的语法："),n("code",[s._v("arr.flat([depth])")])]),s._v(" "),n("p",[s._v("其中 depth 是 flat 的参数，depth 是可以传递数组的展开深度（默认不填、数值是 1），即展开一层数组。如果层数不确定，参数可以传进 Infinity，代表不论多少层都要展开：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1, [2, [3, 4]]];\nfunction flatten(arr) {\n  return arr.flat(Infinity);\n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("可以看出，一个嵌套了两层的数组，通过将 flat 方法的参数设置为 Infinity，达到了我们预期的效果。其实同样也可以设置成 2，也能实现这样的效果。在编程过程中，如果数组的嵌套层数不确定，最好直接使用 Infinity，可以达到扁平化。 "),n("strong",[s._v("（6）正则和 JSON 方法")]),s._v(" 在第4种方法中已经使用 toString 方法，其中仍然采用了将 JSON.stringify 的方法先转换为字符串，然后通过正则表达式过滤掉字符串中的数组的方括号，最后再利用 JSON.parse 把它转换成数组：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1, [2, [3, [4, 5]]], 6];\nfunction flatten(arr) {\n  let str = JSON.stringify(arr);\n  str = str.replace(/([|])/g, '');\n  str = '[' + str + ']';\n  return JSON.parse(str); \n}\nconsole.log(flatten(arr)); //  [1, 2, 3, 4，5]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"_6-实现数组去重"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-实现数组去重"}},[s._v("#")]),s._v(" 6. 实现数组去重")]),s._v(" "),n("p",[s._v("给定某无序数组，要求去除数组中的重复数字并且返回新的无重复数组。")]),s._v(" "),n("p",[s._v("ES6方法（使用数据结构集合）：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];\n\nArray.from(new Set(array)); // [1, 2, 3, 5, 9, 8]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("ES5方法：使用map存储不重复的数字")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8];\n\nuniqueArray(array); // [1, 2, 3, 5, 9, 8]\n\nfunction uniqueArray(array) {\n  let map = {};\n  let res = [];\n  for(var i = 0; i < array.length; i++) {\n    if(!map.hasOwnProperty([array[i]])) {\n      map[array[i]] = 1;\n      res.push(array[i]);\n    }\n  }\n  return res;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h3",{attrs:{id:"_7-实现数组的flat方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-实现数组的flat方法"}},[s._v("#")]),s._v(" 7. 实现数组的flat方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function _flat(arr, depth) {\n  if(!Array.isArray(arr) || depth <= 0) {\n    return arr;\n  }\n  return arr.reduce((prev, cur) => {\n    if (Array.isArray(cur)) {\n      return prev.concat(_flat(cur, depth - 1))\n    } else {\n      return prev.concat(cur);\n    }\n  }, []);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h3",{attrs:{id:"_8-实现数组的push方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-实现数组的push方法"}},[s._v("#")]),s._v(" 8. 实现数组的push方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [];\nArray.prototype.push = function() {\n\tfor( let i = 0 ; i < arguments.length ; i++){\n\t\tthis[this.length] = arguments[i] ;\n\t}\n\treturn this.length;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"_9-实现数组的filter方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-实现数组的filter方法"}},[s._v("#")]),s._v(" 9. 实现数组的filter方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Array.prototype._filter = function(fn) {\n    if (typeof fn !== \"function\") {\n        throw Error('参数必须是一个函数');\n    }\n    const res = [];\n    for (let i = 0, len = this.length; i < len; i++) {\n        fn(this[i]) && res.push(this[i]);\n    }\n    return res;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"_10-实现数组的map方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-实现数组的map方法"}},[s._v("#")]),s._v(" 10. 实现数组的map方法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Array.prototype._map = function(fn) {\n   if (typeof fn !== \"function\") {\n        throw Error('参数必须是一个函数');\n    }\n    const res = [];\n    for (let i = 0, len = this.length; i < len; i++) {\n        res.push(fn(this[i]));\n    }\n    return res;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"_11-实现字符串的repeat方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-实现字符串的repeat方法"}},[s._v("#")]),s._v(" 11. 实现字符串的repeat方法")]),s._v(" "),n("p",[s._v("输入字符串s，以及其重复的次数，输出重复的结果，例如输入abc，2，输出abcabc。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function repeat(s, n) {\n    return (new Array(n + 1)).join(s);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("递归：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function repeat(s, n) {\n    return (n > 0) ? s.concat(repeat(s, --n)) : "";\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"_12-实现字符串翻转"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-实现字符串翻转"}},[s._v("#")]),s._v(" 12. 实现字符串翻转")]),s._v(" "),n("p",[s._v("在字符串的原型链上添加一个方法，实现字符串翻转：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('String.prototype._reverse = function(a){\n    return a.split("").reverse().join("");\n}\nvar obj = new String();\nvar res = obj._reverse (\'hello\');\nconsole.log(res);    // olleh\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("需要注意的是，必须通过实例化对象之后再去调用定义的方法，不然找不到该方法。")]),s._v(" "),n("h3",{attrs:{id:"_13-将数字每千分位用逗号隔开"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-将数字每千分位用逗号隔开"}},[s._v("#")]),s._v(" 13. 将数字每千分位用逗号隔开")]),s._v(" "),n("p",[n("strong",[s._v("数字有小数版本：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let format = n => {\n    let num = n.toString() // 转成字符串\n    let decimals = ''\n        // 判断是否有小数\n    num.indexOf('.') > -1 ? decimals = num.split('.')[1] : decimals\n    let len = num.length\n    if (len <= 3) {\n        return num\n    } else {\n        let temp = ''\n        let remainder = len % 3\n        decimals ? temp = '.' + decimals : temp\n        if (remainder > 0) { // 不是3的整数倍\n            return num.slice(0, remainder) + ',' + num.slice(remainder, len).match(/\\d{3}/g).join(',') + temp\n        } else { // 是3的整数倍\n            return num.slice(0, len).match(/\\d{3}/g).join(',') + temp \n        }\n    }\n}\nformat(12323.33)  // '12,323.33'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[n("strong",[s._v("数字无小数版本：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let format = n => {\n    let num = n.toString() \n    let len = num.length\n    if (len <= 3) {\n        return num\n    } else {\n        let remainder = len % 3\n        if (remainder > 0) { // 不是3的整数倍\n            return num.slice(0, remainder) + ',' + num.slice(remainder, len).match(/\\d{3}/g).join(',') \n        } else { // 是3的整数倍\n            return num.slice(0, len).match(/\\d{3}/g).join(',') \n        }\n    }\n}\nformat(1232323)  // '1,232,323'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("h3",{attrs:{id:"_14-实现非负大整数相加"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-实现非负大整数相加"}},[s._v("#")]),s._v(" 14. 实现非负大整数相加")]),s._v(" "),n("p",[s._v("JavaScript对数值有范围的限制，限制如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Number.MAX_VALUE // 1.7976931348623157e+308\nNumber.MAX_SAFE_INTEGER // 9007199254740991\nNumber.MIN_VALUE // 5e-324\nNumber.MIN_SAFE_INTEGER // -9007199254740991\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("如果想要对一个超大的整数("),n("code",[s._v("> Number.MAX_SAFE_INTEGER")]),s._v(")进行加法运算，但是又想输出一般形式，那么使用 + 是无法达到的，一旦数字超过 "),n("code",[s._v("Number.MAX_SAFE_INTEGER")]),s._v(" 数字会被立即转换为科学计数法，并且数字精度相比以前将会有误差。")]),s._v(" "),n("p",[s._v("实现一个算法进行大数的相加：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function sumBigNumber(a, b) {\n  let res = '';\n  let temp = 0;\n  \n  a = a.split('');\n  b = b.split('');\n  \n  while (a.length || b.length || temp) {\n    temp += ~~a.pop() + ~~b.pop();\n    res = (temp % 10) + res;\n    temp  = temp > 9\n  }\n  return res.replace(/^0+/, '');\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("其主要的思路如下：")]),s._v(" "),n("ul",[n("li",[s._v("首先用字符串的方式来保存大数，这样数字在数学表示上就不会发生变化")]),s._v(" "),n("li",[s._v("初始化res，temp来保存中间的计算结果，并将两个字符串转化为数组，以便进行每一位的加法运算")]),s._v(" "),n("li",[s._v("将两个数组的对应的位进行相加，两个数相加的结果可能大于10，所以可能要仅为，对10进行取余操作，将结果保存在当前位")]),s._v(" "),n("li",[s._v("判断当前位是否大于9，也就是是否会进位，若是则将temp赋值为true，因为在加法运算中，true会自动隐式转化为1，以便于下一次相加")]),s._v(" "),n("li",[s._v("重复上述操作，直至计算结束")])]),s._v(" "),n("h3",{attrs:{id:"_13-实现-add-1-2-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-实现-add-1-2-3"}},[s._v("#")]),s._v(" 13. 实现 add(1)(2)(3)")]),s._v(" "),n("p",[s._v("函数柯里化概念： 柯里化（Currying）是把接受多个参数的函数转变为接受一个单一参数的函数，并且返回接受余下的参数且返回结果的新函数的技术。")]),s._v(" "),n("p",[s._v("1）粗暴版")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function add (a) {\nreturn function (b) {\n \treturn function (c) {\n      return a + b + c;\n \t}\n}\n}\nconsole.log(add(1)(2)(3)); // 6\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("2）柯里化解决方案")]),s._v(" "),n("ul",[n("li",[s._v("参数长度固定")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var add = function (m) {\n  var temp = function (n) {\n    return add(m + n);\n  }\n  temp.toString = function () {\n    return m;\n  }\n  return temp;\n};\nconsole.log(add(3)(4)(5)); // 12\nconsole.log(add(3)(6)(9)(25)); // 43\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("对于add(3)(4)(5)，其执行过程如下：")]),s._v(" "),n("ol",[n("li",[s._v("先执行add(3)，此时m=3，并且返回temp函数；")]),s._v(" "),n("li",[s._v("执行temp(4)，这个函数内执行add(m+n)，n是此次传进来的数值4，m值还是上一步中的3，所以add(m+n)=add(3+4)=add(7)，此时m=7，并且返回temp函数")]),s._v(" "),n("li",[s._v("执行temp(5)，这个函数内执行add(m+n)，n是此次传进来的数值5，m值还是上一步中的7，所以add(m+n)=add(7+5)=add(12)，此时m=12，并且返回temp函数")]),s._v(" "),n("li",[s._v("由于后面没有传入参数，等于返回的temp函数不被执行而是打印，了解JS的朋友都知道对象的toString是修改对象转换字符串的方法，因此代码中temp函数的toString函数return m值，而m值是最后一步执行函数时的值m=12，所以返回值是12。")])]),s._v(" "),n("ul",[n("li",[s._v("参数长度不固定")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function add (...args) {\n    //求和\n    return args.reduce((a, b) => a + b)\n}\nfunction currying (fn) {\n    let args = []\n    return function temp (...newArgs) {\n        if (newArgs.length) {\n            args = [\n                ...args,\n                ...newArgs\n            ]\n            return temp\n        } else {\n            let val = fn.apply(this, args)\n            args = [] //保证再次调用时清空\n            return val\n        }\n    }\n}\nlet addCurry = currying(add)\nconsole.log(addCurry(1)(2)(3)(4, 5)())  //15\nconsole.log(addCurry(1)(2)(3, 4, 5)())  //15\nconsole.log(addCurry(1)(2, 3, 4, 5)())  //15\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("h3",{attrs:{id:"_14-实现类数组转化为数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-实现类数组转化为数组"}},[s._v("#")]),s._v(" 14. 实现类数组转化为数组")]),s._v(" "),n("p",[s._v("类数组转换为数组的方法有这样几种：")]),s._v(" "),n("ul",[n("li",[s._v("通过 call 调用数组的 slice 方法来实现转换")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Array.prototype.slice.call(arrayLike);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("通过 call 调用数组的 splice 方法来实现转换")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Array.prototype.splice.call(arrayLike, 0);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("通过 apply 调用数组的 concat 方法来实现转换")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Array.prototype.concat.apply([], arrayLike);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("通过 Array.from 方法来实现转换")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Array.from(arrayLike);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"_15-使用-reduce-求和"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-使用-reduce-求和"}},[s._v("#")]),s._v(" 15. 使用 reduce 求和")]),s._v(" "),n("p",[s._v("arr = [1,2,3,4,5,6,7,8,9,10]，求和")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1,2,3,4,5,6,7,8,9,10]\narr.reduce((prev, cur) => { return prev + cur }, 0)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("arr = [1,2,3,[[4,5],6],7,8,9]，求和")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let arr = [1,2,3,4,5,6,7,8,9,10]\narr.flat(Infinity).reduce((prev, cur) => { return prev + cur }, 0)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("arr = [{a:1, b:3}, {a:2, b:3, c:4}, {a:3}]，求和")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('let arr = [{a:9, b:3, c:4}, {a:1, b:3}, {a:3}] \n\narr.reduce((prev, cur) => {\n    return prev + cur["a"];\n}, 0)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"_16-将js对象转化为树形结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-将js对象转化为树形结构"}},[s._v("#")]),s._v(" 16. 将js对象转化为树形结构")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 转换前：\nsource = [{\n            id: 1,\n            pid: 0,\n            name: 'body'\n          }, {\n            id: 2,\n            pid: 1,\n            name: 'title'\n          }, {\n            id: 3,\n            pid: 2,\n            name: 'div'\n          }]\n// 转换为: \ntree = [{\n          id: 1,\n          pid: 0,\n          name: 'body',\n          children: [{\n            id: 2,\n            pid: 1,\n            name: 'title',\n            children: [{\n              id: 3,\n              pid: 1,\n              name: 'div'\n            }]\n          }\n        }]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("p",[s._v("代码实现：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function jsonToTree(data) {\n  // 初始化结果数组，并判断输入数据的格式\n  let result = []\n  if(!Array.isArray(data)) {\n    return result\n  }\n  // 使用map，将当前对象的id与当前对象对应存储起来\n  let map = {};\n  data.forEach(item => {\n    map[item.id] = item;\n  });\n  // \n  data.forEach(item => {\n    let parent = map[item.pid];\n    if(parent) {\n      (parent.children || (parent.children = [])).push(item);\n    } else {\n      result.push(item);\n    }\n  });\n  return result;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("h3",{attrs:{id:"_17-使用es5和es6求函数参数的和"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17-使用es5和es6求函数参数的和"}},[s._v("#")]),s._v(" 17. 使用ES5和ES6求函数参数的和")]),s._v(" "),n("p",[s._v("ES5：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function sum() {\n    let sum = 0\n    Array.prototype.forEach.call(arguments, function(item) {\n        sum += item * 1\n    })\n    return sum\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("ES6：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function sum(...nums) {\n    let sum = 0\n    nums.forEach(function(item) {\n        sum += item * 1\n    })\n    return sum\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"_18-解析-url-params-为对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-解析-url-params-为对象"}},[s._v("#")]),s._v(" 18. 解析 URL Params 为对象")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let url = 'http://www.domain.com/?user=anonymous&id=123&id=456&city=%E5%8C%97%E4%BA%AC&enabled';\nparseParam(url)\n/* 结果\n{ user: 'anonymous',\n  id: [ 123, 456 ], // 重复出现的 key 要组装成数组，能被转成数字的就转成数字类型\n  city: '北京', // 中文需解码\n  enabled: true, // 未指定值得 key 约定为 true\n}\n*/\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function parseParam(url) {\n  const paramsStr = /.+?(.+)$/.exec(url)[1]; // 将 ? 后面的字符串取出来\n  const paramsArr = paramsStr.split('&'); // 将字符串以 & 分割后存到数组中\n  let paramsObj = {};\n  // 将 params 存到对象中\n  paramsArr.forEach(param => {\n    if (/=/.test(param)) { // 处理有 value 的参数\n      let [key, val] = param.split('='); // 分割 key 和 value\n      val = decodeURIComponent(val); // 解码\n      val = /^\\d+$/.test(val) ? parseFloat(val) : val; // 判断是否转为数字\n      if (paramsObj.hasOwnProperty(key)) { // 如果对象有 key，则添加一个值\n        paramsObj[key] = [].concat(paramsObj[key], val);\n      } else { // 如果对象没有这个 key，创建 key 并设置值\n        paramsObj[key] = val;\n      }\n    } else { // 处理没有 value 的参数\n      paramsObj[param] = true;\n    }\n  })\n  return paramsObj;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);